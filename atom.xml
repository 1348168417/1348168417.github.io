<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jade_Wang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-03T14:52:54.353Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jade_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>治愈系git_命令清单</title>
    <link href="http://yoursite.com/2017/06/03/%E6%B2%BB%E6%84%88%E7%B3%BBgit-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2017/06/03/治愈系git-命令清单/</id>
    <published>2017-06-03T14:49:55.000Z</published>
    <updated>2017-06-03T14:52:54.353Z</updated>
    
    <content type="html"><![CDATA[<p>常用 Git 命令清单<br>作者： 阮一峰<br>日期： 2015年12月 9日<br>我每天使用 Git ，但是很多命令记不住。<br>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库<br>一、新建代码库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git init</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个目录，将其初始化为Git代码库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 下载一个项目和它的整个代码历史</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></div></pre></td></tr></table></figure></p>
<p>二、配置<br>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 显示当前的Git配置</span></div><div class="line"><span class="meta">$</span><span class="bash"> git config --list</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 编辑Git配置文件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git config <span class="_">-e</span> [--global]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 设置提交代码时的用户信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.name <span class="string">"[name]"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git config [--global] user.email <span class="string">"[email address]"</span></span></div></pre></td></tr></table></figure></p>
<p>三、增加/删除文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add [file1] [file2] ...</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 添加指定目录到暂存区，包括子目录</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add [dir]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 添加当前目录的所有文件到暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add .</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 添加每个变化前，都会要求确认</span></div><div class="line"><span class="meta">#</span><span class="bash"> 对于同一个文件的多处变化，可以实现分次提交</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add -p</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除工作区文件，并且将这次删除放入暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git rm [file1] [file2] ...</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 停止追踪指定文件，但该文件会保留在工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git rm --cached [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 改名文件，并且将这个改名放入暂存区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git mv [file-original] [file-renamed]</span></div></pre></td></tr></table></figure></p>
<p>四、代码提交<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 提交暂存区到仓库区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m [message]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交暂存区的指定文件到仓库区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit [file1] [file2] ... -m [message]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交工作区自上次commit之后的变化，直接到仓库区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit <span class="_">-a</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交时显示所有diff信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -v</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="meta">#</span><span class="bash"> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit --amend -m [message]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重做上一次commit，并包括指定文件的新变化</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit --amend [file1] [file2] ...</span></div></pre></td></tr></table></figure></p>
<p>五、分支<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 列出所有远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 列出所有本地分支和远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-a</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，但依然停留在当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，并切换到该分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，指向指定commit</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 切换到指定分支，并更新工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 切换到上一个分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream [branch] [remote-branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 合并指定分支到当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 选择一个commit，合并进当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch <span class="_">-d</span> [branch-name]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除远程分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></div><div class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></div></pre></td></tr></table></figure></p>
<p>六、标签<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git tag</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个tag在当前commit</span></div><div class="line"><span class="meta">$</span><span class="bash"> git tag [tag]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个tag在指定commit</span></div><div class="line"><span class="meta">$</span><span class="bash"> git tag [tag] [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除本地tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git tag <span class="_">-d</span> [tag]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除远程tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tagName]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 查看tag信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git show [tag]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交指定tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] [tag]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 提交所有tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] --tags</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个分支，指向某个tag</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></div></pre></td></tr></table></figure></p>
<p>七、查看信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示当前分支的版本历史</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --stat</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 搜索提交历史，根据关键词</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某个文件的版本历史，包括文件改名</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></div><div class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示指定文件相关的每一次diff</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示过去5次提交</span></div><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示所有提交过的用户，按提交次数排序</span></div><div class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示指定文件是什么人在什么时间修改过</span></div><div class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示暂存区和工作区的差异</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示暂存区和上一个commit的差异</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示两次提交之间的差异</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示今天你写了多少行代码</span></div><div class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某次提交的元数据和内容变化</span></div><div class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某次提交发生变化的文件</span></div><div class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某次提交时，某个文件的内容</span></div><div class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示当前分支的最近几次提交</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reflog</span></div></pre></td></tr></table></figure></p>
<p>八、远程同步<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 下载远程仓库的所有变动</span></div><div class="line"><span class="meta">$</span><span class="bash"> git fetch [remote]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示所有远程仓库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 显示某个远程仓库的信息</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote show [remote]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 增加一个新的远程仓库，并命名</span></div><div class="line"><span class="meta">$</span><span class="bash"> git remote add [shortname] [url]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 取回远程仓库的变化，并与本地分支合并</span></div><div class="line"><span class="meta">$</span><span class="bash"> git pull [remote] [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 上传本地指定分支到远程仓库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] [branch]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 强行推送当前分支到远程仓库，即使有冲突</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] --force</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 推送所有分支到远程仓库</span></div><div class="line"><span class="meta">$</span><span class="bash"> git push [remote] --all</span></div></pre></td></tr></table></figure></p>
<p>九、撤销<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 恢复暂存区的指定文件到工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout [commit] [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 恢复暂存区的所有文件到工作区</span></div><div class="line"><span class="meta">$</span><span class="bash"> git checkout .</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset [file]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset --hard</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset --hard [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></div><div class="line"><span class="meta">$</span><span class="bash"> git reset --keep [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 新建一个commit，用来撤销指定commit</span></div><div class="line"><span class="meta">#</span><span class="bash"> 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line"><span class="meta">$</span><span class="bash"> git revert [commit]</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 暂时将未提交的变化移除，稍后再移入</span></div><div class="line"><span class="meta">$</span><span class="bash"> git stash</span></div><div class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></div></pre></td></tr></table></figure></p>
<p>十、其他<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 生成一个可供发布的压缩包</span></div><div class="line"><span class="meta">$</span><span class="bash"> git archive</span></div><div class="line">（完）</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用 Git 命令清单&lt;br&gt;作者： 阮一峰&lt;br&gt;日期： 2015年12月 9日&lt;br&gt;我每天使用 Git ，但是很多命令记不住。&lt;br&gt;一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。&lt;/p&gt;
&lt;p&gt;下面是我整理的常用 Gi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MongoDB_安装及配置</title>
    <link href="http://yoursite.com/2017/06/01/MongoDB-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/06/01/MongoDB-安装及配置/</id>
    <published>2017-06-01T15:44:28.000Z</published>
    <updated>2017-06-01T15:51:16.195Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB 下载：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a></p>
<h2 id="MongoDB-安装配置："><a href="#MongoDB-安装配置：" class="headerlink" title="MongoDB 安装配置："></a>MongoDB 安装配置：</h2><h4 id="备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd"><a href="#备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd" class="headerlink" title="备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd"></a>备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd</h4><h3 id="1、进入mongodb-下的目录"><a href="#1、进入mongodb-下的目录" class="headerlink" title="1、进入mongodb 下的目录"></a>1、进入mongodb 下的目录</h3><p>E:\Tool\modb&gt;<br>在目录下新建</p>
<ul>
<li>db 目录</li>
<li>log 目录 </li>
<li>在log 目录下新建mongodb.log 文件<a id="more"></a></li>
</ul>
<h3 id="2、指定日志文件目录"><a href="#2、指定日志文件目录" class="headerlink" title="2、指定日志文件目录"></a>2、指定日志文件目录</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\b</span>in&gt;mongod --logpath "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\l</span>og<span class="symbol">\m</span>ongodb.log"指定数据存放目录</div></pre></td></tr></table></figure>
<h3 id="3、指定数据存放目录"><a href="#3、指定数据存放目录" class="headerlink" title="3、指定数据存放目录"></a>3、指定数据存放目录</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\b</span>in&gt;mongod --dbpath "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\d</span>b"</div></pre></td></tr></table></figure>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.583<span class="string">+0800</span> I CONTROL  [initandlisten] MongoDB starting : pid=12244 port=27017 dbpath=E:\Tool\modb\db 64-bit host=JSB015</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.584<span class="string">+0800</span> I CONTROL  [initandlisten] targetMinOS: Windows Vista/Windows Server 2008</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.587<span class="string">+0800</span> I CONTROL  [initandlisten] db version v3.4.3</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.587<span class="string">+0800</span> I CONTROL  [initandlisten] git version: f07437fb5a6cca07c10bafa78365456eb1d6d5e1</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.588<span class="string">+0800</span> I CONTROL  [initandlisten] allocator: tcmalloc</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.589<span class="string">+0800</span> I CONTROL  [initandlisten] modules: none</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.590<span class="string">+0800</span> I CONTROL  [initandlisten] build environment:</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.590<span class="string">+0800</span> I CONTROL  [initandlisten]     distarch: x86_64</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.591<span class="string">+0800</span> I CONTROL  [initandlisten]     target_arch: x86_64</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.592<span class="string">+0800</span> I CONTROL  [initandlisten] options: &#123; storage: &#123; dbPath: "E:\Tool\modb\db" &#125; &#125;</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.600<span class="string">+0800</span> I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=3518M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.630<span class="string">+0800</span> I CONTROL  [initandlisten]</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.630<span class="string">+0800</span> I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.631<span class="string">+0800</span> I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:31.632<span class="string">+0800</span> I CONTROL  [initandlisten]</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.047<span class="string">+0800</span> I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory 'E:/Tool/modb/db/diagnostic.data'</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.058<span class="string">+0800</span> I INDEX    [initandlisten] build index on: admin.system.version properties: &#123; v: 2, key: &#123; version: 1 &#125;, name: "incompatible_with_version_32", ns: "admin.system.version" &#125;</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.058<span class="string">+0800</span> I INDEX    [initandlisten]          building index using bulk method; build may temporarily use up to 500 megabytes of RAM</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.061<span class="string">+0800</span> I INDEX    [initandlisten] build index done.  scanned 0 total records. 0 secs</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.063<span class="string">+0800</span> I COMMAND  [initandlisten] setting featureCompatibilityVersion to 3.4</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:45:32.064<span class="string">+0800</span> I NETWORK  [thread1] waiting for connections on port 27017</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.020<span class="string">+0800</span> I CONTROL  [thread2] Ctrl-C signal</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.020<span class="string">+0800</span> I CONTROL  [consoleTerminate] got CTRL_C_EVENT, will terminate after current cmd ends</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.028<span class="string">+0800</span> I NETWORK  [consoleTerminate] shutdown: going to close listening sockets...</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.030<span class="string">+0800</span> I NETWORK  [consoleTerminate] closing listening socket: 464</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.032<span class="string">+0800</span> I NETWORK  [consoleTerminate] shutdown: going to flush diaglog...</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.034<span class="string">+0800</span> I FTDC     [consoleTerminate] Shutting down full-time diagnostic data capture</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.043<span class="string">+0800</span> I STORAGE  [consoleTerminate] WiredTigerKVEngine shutting down</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.164<span class="string">+0800</span> I STORAGE  [consoleTerminate] shutdown: removing fs lock...</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.165<span class="string">+0800</span> I CONTROL  [consoleTerminate] now exiting</div><div class="line">2017<span class="string">-04</span><span class="string">-09</span>T10:47:24.171<span class="string">+0800</span> I CONTROL  [consoleTerminate] shutting down with code:12</div></pre></td></tr></table></figure>
<p>4、连接数据库<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">E</span>:\Tool\modb\bin&gt;mongo</div><div class="line">MongoDB shell version v3.<span class="number">4.3</span></div><div class="line">connecting <span class="attribute">to</span>: <span class="attribute">mongodb</span>:<span class="comment">//127.0.0.1:27017</span></div><div class="line"><span class="number">2017</span><span class="attribute">-04-09T10</span>:<span class="number">47</span>:<span class="number">38.944</span>+<span class="number">0800</span> W NETWORK  [thread1] Failed to connect to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span> after <span class="number">5000ms</span> milliseconds, giving up.</div><div class="line"><span class="number">2017</span><span class="attribute">-04-09T10</span>:<span class="number">47</span>:<span class="number">38.946</span>+<span class="number">0800</span> E QUERY    [thread1] <span class="attribute">Error</span>: couldn't connect to server <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span>, connection attempt <span class="attribute">failed </span>:</div><div class="line">connect<span class="variable">@src</span>/mongo/shell/mongo.<span class="attribute">js</span>:<span class="number">237</span>:<span class="number">13</span></div><div class="line">@(connect):<span class="number">1</span>:<span class="number">6</span></div><div class="line"><span class="attribute">exception</span>: connect failed</div></pre></td></tr></table></figure></p>
<p>5、从新打开一个终端, 安装MongoDB服务<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb&gt;cd bin</div></pre></td></tr></table></figure></p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\b</span>in&gt;mongod --dbpath "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb" --logpath "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\l</span>og<span class="symbol">\m</span>ongodb.log" --install --serviceName "MongoDB"</div><div class="line">2017-04-09T11:01:31.833+0800 I CONTROL  [main] log file "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\l</span>og<span class="symbol">\m</span>ongodb.log" exists; moved to "E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\l</span>og<span class="symbol">\m</span>ongodb.log.2017-04-09T03-01-31".</div></pre></td></tr></table></figure>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E:<span class="symbol">\T</span>ool<span class="symbol">\m</span>odb<span class="symbol">\b</span>in&gt;net start MongoDB</div><div class="line">MongoDB 服务正在启动 .</div><div class="line">MongoDB 服务已经启动成功。</div></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">E:\Tool\modb\bin&gt;mongo</div><div class="line">MongoDB <span class="keyword">shell</span> <span class="keyword">version</span> v3.<span class="number">4.3</span></div><div class="line">connecting <span class="keyword">to</span>: mongod<span class="variable">b:</span>//<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">27017</span></div><div class="line">MongoDB server <span class="keyword">version</span>: <span class="number">3.4</span>.<span class="number">3</span></div><div class="line">Welcome <span class="keyword">to</span> the MongoDB <span class="keyword">shell</span>.</div><div class="line">For interactive <span class="keyword">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</div><div class="line">For more comprehensive documentation, see</div><div class="line">        http://docs.mongodb.org/</div><div class="line">Questions? Try the support group</div><div class="line">        http://groups.google.<span class="keyword">com</span>/group/mongodb-user</div><div class="line">Server <span class="built_in">has</span> startup warning<span class="variable">s:</span></div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">09</span>T11:<span class="number">02</span>:<span class="number">18.826</span>+<span class="number">0800</span> I CONTROL  [initandlisten]</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">09</span>T11:<span class="number">02</span>:<span class="number">18.826</span>+<span class="number">0800</span> I CONTROL  [initandlisten] ** WARNING: Access control <span class="keyword">is</span> not enabled <span class="keyword">for</span> the database.</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">09</span>T11:<span class="number">02</span>:<span class="number">18.826</span>+<span class="number">0800</span> I CONTROL  [initandlisten] **          Read <span class="built_in">and</span> <span class="keyword">write</span> access <span class="keyword">to</span> data <span class="built_in">and</span> configuration <span class="keyword">is</span> unrestricted.</div><div class="line"><span class="number">2017</span>-<span class="number">04</span>-<span class="number">09</span>T11:<span class="number">02</span>:<span class="number">18.826</span>+<span class="number">0800</span> I CONTROL  [initandlisten]</div></pre></td></tr></table></figure>
<p>连接上了———————</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB 下载：&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;MongoDB-安装配置：&quot;&gt;&lt;a href=&quot;#MongoDB-安装配置：&quot; class=&quot;headerlink&quot; title=&quot;MongoDB 安装配置：&quot;&gt;&lt;/a&gt;MongoDB 安装配置：&lt;/h2&gt;&lt;h4 id=&quot;备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd&quot;&gt;&lt;a href=&quot;#备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd&quot; class=&quot;headerlink&quot; title=&quot;备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd&quot;&gt;&lt;/a&gt;备注：记得加入环境变量，指定绝对路径，最好是以超级管理员运行cmd&lt;/h4&gt;&lt;h3 id=&quot;1、进入mongodb-下的目录&quot;&gt;&lt;a href=&quot;#1、进入mongodb-下的目录&quot; class=&quot;headerlink&quot; title=&quot;1、进入mongodb 下的目录&quot;&gt;&lt;/a&gt;1、进入mongodb 下的目录&lt;/h3&gt;&lt;p&gt;E:\Tool\modb&amp;gt;&lt;br&gt;在目录下新建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;db 目录&lt;/li&gt;
&lt;li&gt;log 目录 &lt;/li&gt;
&lt;li&gt;在log 目录下新建mongodb.log 文件
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安装及配置</title>
    <link href="http://yoursite.com/2017/06/01/%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/06/01/安装及配置/</id>
    <published>2017-06-01T15:40:21.000Z</published>
    <updated>2017-06-01T15:40:21.088Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈Java面向对象</title>
    <link href="http://yoursite.com/2017/05/29/%E6%B5%85%E8%B0%88Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/05/29/浅谈Java面向对象/</id>
    <published>2017-05-29T02:53:38.000Z</published>
    <updated>2017-05-29T03:01:37.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java面向对象详解"><a href="#Java面向对象详解" class="headerlink" title="Java面向对象详解"></a>Java面向对象详解</h2><p>　　前言：接触项目开发也有很长一段时间了，最近开始萌发出想回过头来写写以前学过的基础知识的想法。一是原来刚开始学习接触编程，一个人跌跌撞撞摸索着往前走，初学的时候很多东西理解的也懵懵懂懂，后来实践的多了，有些东西才慢慢清楚；二是经过一定的实践之后，反过头来再去学习一些基础东西才能够理解的更透彻；三是有些东西基础但是确很重要，是值得好好搞一搞的。<a id="more"></a></p>
<h3 id="1、面向对象"><a href="#1、面向对象" class="headerlink" title="1、面向对象"></a>1、面向对象</h3><p>　　面向对象（Object Oriented）是一种新兴的程序设计方法，或者是一种新的程序设计规范(paradigm)，其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计。从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式。</p>
<h3 id="2、对象"><a href="#2、对象" class="headerlink" title="2、对象"></a>2、对象</h3><p>　　对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位。一个对象由一组属性和对这组属性进行操作的一组服务组成。</p>
<p>　　类的实例化可生成对象，一个对象的生命周期包括三个阶段：生成、使用、消除。</p>
<p>　　当不存在对一个对象的引用时，该对象成为一个无用对象。Java的垃圾收集器自动扫描对象的动态内存区，把没有引用的对象作为垃圾收集起来并释放。当系统内存用尽或调用System.gc( )要求垃圾回收时，垃圾回收线程与系统同步运行。</p>
<h3 id="3、类"><a href="#3、类" class="headerlink" title="3、类"></a>3、类</h3><p>　　类是具有相同属性和方法的一组对象的集合，它为属于该类的所有对象提供了统一的抽象描述，其内部包括属性和方法两个主要部分。在面向对象的编程语言中，类是一个独立的程序单位，它应该有一个类名并包括属性和方法两个主要部分。</p>
<p>　　Java中的类实现包括两个部分：类声明和类体。</p>
<p>　　类声明</p>
<p>1<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">public</span>][<span class="symbol">abstract|final</span>] class className [extends superclassName] [implements interfaceNameList]&#123;……&#125;</div></pre></td></tr></table></figure></p>
<p>　　其中，修饰符public,abstract,final 说明了类的属性，className为类名，superclassName为类的父类的名字，interfaceNameList为类所实现的接口列表。</p>
<p>　　类体</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span></span>&#123;</div><div class="line">    [<span class="keyword">public</span> | <span class="keyword">protected</span> | <span class="keyword">private</span> ] [<span class="keyword">static</span>] [<span class="keyword">final</span>] [<span class="keyword">transient</span>] [<span class="keyword">volatile</span>] type variableName;<span class="comment">//成员变量</span></div><div class="line">    [<span class="keyword">public</span> | <span class="keyword">protected</span> | <span class="keyword">private</span> ] [<span class="keyword">static</span>] [<span class="keyword">final</span> | <span class="keyword">abstract</span>] [<span class="keyword">native</span>] [<span class="keyword">synchronized</span>] <span class="function">returnType <span class="title">methodName</span><span class="params">([paramList])</span> [<span class="keyword">throws</span> exceptionList]</span>&#123;</div><div class="line">        statements</div><div class="line">    &#125;<span class="comment">//成员方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　成员变量限定词的含义：</p>
<ul>
<li>static: 静态变量（类变量）</li>
<li>final: 常量；transient: 暂时性变量，用于对象存档，用于对象的串行化</li>
<li>volatile: 贡献变量，用于并发线程的共享<br>　　方法的实现也包括两部分内容：方法声明和方法体。</li>
</ul>
<h4 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h4><p>　　方法声明中的限定词的含义：</p>
<ul>
<li>static: 类方法，可通过类名直接调用</li>
<li>abstract: 抽象方法，没有方法体</li>
<li>final: 方法不能被重写</li>
<li>native: 集成其它语言的代码</li>
<li>synchronized: 控制多个并发线程的访问<br>　　方法声明包括方法名、返回类型和外部参数。其中参数的类型可以是简单数据类型，也可以是复合数据类型（又称引用数据类型）。<br>　　对于简单数据类型来说，java实现的是值传递，方法接收参数的值，但不能改变这些参数的值。如果要改变参数的值，则用引用数据类型，因为引用数据类型传递给方法的是数据在内存中的地址，方法中对数据的操作可以改变数据的值。</li>
</ul>
<h4 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h4><p>　　方法体是对方法的实现，它包括局部变量的声明以及所有合法的Java指令。方法体中声明的局部变量的作用域在该方法内部。若局部变量与类的成员变量同名，则类的成员变量被隐藏。<br>　　为了区别参数和类的成员变量，我们必须使用this。this用在一个方法中引用当前对象，它的值是调用该方法的对象。返回值须与返回类型一致，或者完全相同，或是其子类。当返回类型是接口时，返回值必须实现该接口。</p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>构造方法是一个特殊的方法。Java 中的每个类都有构造方法，用来初始化该类的一个对象。<br>构造方法具有和类名相同的名称，而且不返回任何数据类型。<br>重载经常用于构造方法。<br>构造方法只能由new运算符调用</p>
<h3 id="4、面向对象的基本特性"><a href="#4、面向对象的基本特性" class="headerlink" title="4、面向对象的基本特性"></a>4、面向对象的基本特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>　　封装性就是尽可能的隐藏对象内部细节，对外形成一道边界，只保留有限的接口和方法与外界进行交互。封装的原则是使对象以外的部分不能随意的访问和操作对象的内部属性，从而避免了外界对对象内部属性的破坏。</p>
<p>　　可以通过对类的成员设置一定的访问权限，实现类中成员的信息隐藏。</p>
<ul>
<li>private：类中限定为private的成员，只能被这个类本身访问。如果一个类的构造方法声明为private,则其它类不能生成该类的一个实例。</li>
<li>default：类中不加任何访问权限限定的成员属于缺省的（default）访问状态，可以被这个类本身和同一个包中的类所访问。</li>
<li>protected：类中限定为protected的成员，可以被这个类本身、它的子类（包括同一个包中以及不同包中的子类）和同一个包中的所有其他的类访问。</li>
<li>public：类中限定为public的成员，可以被所有的类访问。</li>
</ul>
<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>　　子类的对象拥有父类的全部属性与方法，称作子类对父类的继承。</p>
<ul>
<li>Java中父类可以拥有多个子类，但是子类只能继承一个父类，称为单继承。<br>继承实现了代码的复用。</li>
<li>Java中所有的类都是通过直接或间接地继承java.lang.Object类得到的。</li>
<li>子类不能继承父类中访问权限为private的成员变量和方法。</li>
<li>子类可以重写父类的方法，即命名与父类同名的成员变量。</li>
</ul>
<h5 id="Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。super-的使用有三种情况："><a href="#Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。super-的使用有三种情况：" class="headerlink" title="Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。super 的使用有三种情况："></a>Java中通过super来实现对父类成员的访问，super用来引用当前对象的父类。super 的使用有三种情况：</h5><ul>
<li>访问父类被隐藏的成员变量，如：super.variable;</li>
<li>调用父类中被重写的方法，如：super.Method([paramlist]),super()调用父类构造方法;</li>
<li>调用父类的构造函数，如：super([paramlist]);<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4></li>
</ul>
<p>　　对象的多态性是指在父类中定义的属性或方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或方法在父类及其各个子类中具有不同的语义。例如：”几何图形”的”绘图”方法，”椭圆”和”多边形”都是”几何图”的子类，其”绘图”方法功能不同。</p>
<p>　　Java的多态性体现在两个方面：由方法重载实现的静态多态性（编译时多态）和方法重写实现的动态多态性（运行时多态）。</p>
<ul>
<li>编译时多态：在编译阶段，具体调用哪个被重载的方法，编译器会根据参数的不同来静态确定调用相应的方法。</li>
<li><p>运行时多态：由于子类继承了父类所有的属性（私有的除外），所以子类对象可以作为父类对象使用。程序中凡是使用父类对象的地方，都可以用子类对象来代替。一个对象可以通过引用子类的实例来调用子类的方法。</p>
<h4 id="重载（Overloading）"><a href="#重载（Overloading）" class="headerlink" title="重载（Overloading）"></a>重载（Overloading）</h4></li>
<li><p>方法重载是让类以统一的方式处理不同数据类型的手段。</p>
</li>
<li>一个类中可以创建多个方法，它们具有相同的名字，但具有不同的参数和不同的定义。调用方法时通过传递给它们的不同参数个数和参数类型来决定具体使用哪个方法。</li>
<li><p>返回值类型可以相同也可以不相同，无法以返回型别作为重载函数的区分标准。</p>
<h4 id="重写（Overriding）"><a href="#重写（Overriding）" class="headerlink" title="重写（Overriding）"></a>重写（Overriding）</h4></li>
<li><p>子类对父类的方法进行重新编写。如果在子类中的方法与其父类有相同的的方法名、返回类型和参数表，我们说该方法被重写 (Overriding)。</p>
</li>
<li>如需父类中原有的方法，可使用super关键字，该关键字引用了当前类的父类。</li>
<li>子类函数的访问修饰权限不能低于父类的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java面向对象详解&quot;&gt;&lt;a href=&quot;#Java面向对象详解&quot; class=&quot;headerlink&quot; title=&quot;Java面向对象详解&quot;&gt;&lt;/a&gt;Java面向对象详解&lt;/h2&gt;&lt;p&gt;　　前言：接触项目开发也有很长一段时间了，最近开始萌发出想回过头来写写以前学过的基础知识的想法。一是原来刚开始学习接触编程，一个人跌跌撞撞摸索着往前走，初学的时候很多东西理解的也懵懵懂懂，后来实践的多了，有些东西才慢慢清楚；二是经过一定的实践之后，反过头来再去学习一些基础东西才能够理解的更透彻；三是有些东西基础但是确很重要，是值得好好搞一搞的。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何摆脱项目命名困难的尴尬局面面_治愈系</title>
    <link href="http://yoursite.com/2017/05/26/%E5%A6%82%E4%BD%95%E6%91%86%E8%84%B1%E9%A1%B9%E7%9B%AE%E5%91%BD%E5%90%8D%E5%9B%B0%E9%9A%BE%E7%9A%84%E5%B0%B4%E5%B0%AC%E5%B1%80%E9%9D%A2%E9%9D%A2-%E6%B2%BB%E6%84%88%E7%B3%BB/"/>
    <id>http://yoursite.com/2017/05/26/如何摆脱项目命名困难的尴尬局面面-治愈系/</id>
    <published>2017-05-26T12:16:22.000Z</published>
    <updated>2017-05-26T12:21:33.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何高效的命名你的项目。"><a href="#如何高效的命名你的项目。" class="headerlink" title="如何高效的命名你的项目。"></a>如何高效的命名你的项目。</h2><p>在做一个项目的时候，我们往往遭遇命名问题的困惑，当看到一些非专业人的代码，看到他们凌乱的码法，有时候真的苦不堪言。深刻知道一个良好的命名规范的重要性，同时在项目中也会遇到一些命名的瓶颈。所以有必要写一篇关于常见命名的方式。以下是通过3年的编程经验，以及参考网上知名的开源项目总结的一点经验。希望共勉   <a id="more"></a></p>
<h3 id="1-文件夹命名"><a href="#1-文件夹命名" class="headerlink" title="1.文件夹命名"></a>1.文件夹命名</h3><ul>
<li>(1)最好用一个单词描述</li>
</ul>
<p>常用项目命名  omi、element、master、project、test、vue、iview<br>二级目录    build、static、config、src、examples、base、common、issues、assert<br>三级目录    libs、models、plugins、skins、images、css、js</p>
<ul>
<li>(2))如果一个单词描述不了，用2个词（名词加动词）</li>
</ul>
<p>color-pick、button-groups、date-picker、option-grounp、jquery-select、jquery-swiper</p>
<ul>
<li>(3)中间用-或者_连接为了方便归类、一目了然</li>
</ul>
<p>node_models、async-demo、array-union、array-differ、babel-each</p>
<h3 id="2-文件命名"><a href="#2-文件命名" class="headerlink" title="2.文件命名"></a>2.文件命名</h3><ul>
<li>(1).最好用一个单词描述</li>
</ul>
<p>以下变量名可以加css、js、html，例如index.html、index.js、index.css</p>
<p>常用组件命名  index、message、menu、slider（滑块）、page、progress（进度条）、tooltip（提示）、tree、upload、time、button、checkbox、dialog、cascader（三级联动）<br>常用文件命名  index、shopping（购物）、 share（分享）、integral（积分）、advertisement（广告）、pay（支付）、community（社区）、game、docs、bussiness</p>
<ul>
<li>(2)如果一个单词描述不了，用2个词（名词加动词）</li>
</ul>
<p>share-to-friends，share-to-community，weex-pay，alipay-pay，user-integral，game-page，docs-page等等反正就是自我想象</p>
<ul>
<li>(3)中间用-或者_连接为了方便归类、一目了然</li>
</ul>
<p>在目前做的pc端和移动端，简单的对他们分个类：</p>
<p>移动广告(mobile-advertisement)<br>移动社交(mobile-social)<br>移动电子商务(mobile-bussiness)<br>手机游戏(mobile-game)<br>手机电视(mobile-tv)<br>移动电子阅读(mobile-reading)<br>手机搜索(mobile-search)<br>移动支付(mobile-pay)<br>手机内容共享(mobile-share)<br>关于以上的项目都可以用名词+需要的动词命名，达到见词知意</p>
<h3 id="3-html布局命名"><a href="#3-html布局命名" class="headerlink" title="3.html布局命名"></a>3.html布局命名</h3><p>可以参考DIV+CSS规范命名大全集合但是我觉得写的并不是很好，很全面。因为往往比较纠结的是每一个大布局中小布局的命名。</p>
<p>外套  wrap #container<br>头部  header #head, #header，#nav，#sub-nav，#menu， #sub-menu，#branding<br>主要内容    main bussiness-title 、bussiness-logo、bussiness-search、bussiness-search-results<br>左侧  main-left #side-bar, #side-bar-a, #side-bar-b<br>右侧  main-right #side-bar, #side-bar-a, #side-bar-b<br>内容  content radio-click、radio-heightlight、radio-active、input-seach-off、input-search-on<br>底部  footer #service, #regsiter,#partner（合作伙伴）,#joinus, #site-info<br>总结</p>
<ul>
<li>(1)一般头部有nav、nav-event、nav-style、nav-item、nav-link。 </li>
<li>(2)内容：xx-title、xx-box、xx-warp、xx-item、xx-item-title、xx-item-link、xx-item-image </li>
<li>(3)底部：footer-time、footer-box、footer-item、footer-item-link、footer-address。总之xx-wrap，xx-box，xx-item、xx-link、xx-title、xx-total肯定会满足你80%的需求</li>
</ul>
<h3 id="4-js变量命名"><a href="#4-js变量命名" class="headerlink" title="4.js变量命名"></a>4.js变量命名</h3><ul>
<li>(1)基础类型和引用数据类型</li>
</ul>
<p>基础类型<br>字符串var s_count=”“,<br>布尔类型var b_status=false,<br>数字类型var n_total=12。<br>引用数据类型<br>数组var ar_bar=[],<br>对象var o_bar={},<br>函数var f_submit=function(){}</p>
<ul>
<li>(2)不要用关键字命名default、class、private </li>
<li><p>(3)用可读的同义词代替保留词。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span></span>: <span class="symbol">'alie</span>n'</div><div class="line">&#125;;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  klass: <span class="symbol">'alie</span>n'</div><div class="line">&#125;;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'alie</span>n'</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>(4)函数用驼峰形式（动词+名词）</p>
</li>
</ul>
<p>login(),logout(),expandList(),getTotal(),keySearch(),submitForm(),cancel(),goMore(),searchAll&gt;(),searchCurrent().clearContent().uploadImage().searchResult()这些都是常用事件，可以清晰知道每一项的意义。</p>
<ul>
<li>(5)当命名的构造函数和类使用PascalCase。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'yup'</span></div><div class="line">&#125;);</div><div class="line"><span class="number">6</span>)不要使用尾随或前导下划线</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</div><div class="line"><span class="number">7</span>)前缀jQuery对象变量与$</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">  $sidebar.css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar ul'</span>).hide();</div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</div><div class="line"><span class="comment">// good</span></div><div class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-css命名"><a href="#5-css命名" class="headerlink" title="5.css命名"></a>5.css命名</h3><p>公共的 common.css<br>其实和common差不多    base.css<br>动画  animation.css<br>皮肤  skin.css<br>文字  font.css<br>主题  themes.css<br>打印样式    print.css<br>颜色  color.css</p>
<h3 id="6-图片命名"><a href="#6-图片命名" class="headerlink" title="6.图片命名"></a>6.图片命名</h3><ul>
<li>(1)第一部分是图片的逻辑归属分类 </li>
<li>(2)第二部分是图片的表现内容 </li>
<li>(3)第三部分是图片的内容的类型（有些图片还会有第四部分，表示图片表现的状态。） </li>
<li>(4)tabbar_home_icon, navigationbar_showtime_icon@2x.png，tabbar_categories_icon</li>
</ul>
<p>￼</p>
<h3 id="7-分享demo"><a href="#7-分享demo" class="headerlink" title="7.分享demo"></a>7.分享demo</h3><ul>
<li>(1)饿了么部分组织构架</li>
</ul>
<p>￼</p>
<ul>
<li>(2)腾讯omi<br>￼</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何高效的命名你的项目。&quot;&gt;&lt;a href=&quot;#如何高效的命名你的项目。&quot; class=&quot;headerlink&quot; title=&quot;如何高效的命名你的项目。&quot;&gt;&lt;/a&gt;如何高效的命名你的项目。&lt;/h2&gt;&lt;p&gt;在做一个项目的时候，我们往往遭遇命名问题的困惑，当看到一些非专业人的代码，看到他们凌乱的码法，有时候真的苦不堪言。深刻知道一个良好的命名规范的重要性，同时在项目中也会遇到一些命名的瓶颈。所以有必要写一篇关于常见命名的方式。以下是通过3年的编程经验，以及参考网上知名的开源项目总结的一点经验。希望共勉
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理了一些最近的知识_JavaScript</title>
    <link href="http://yoursite.com/2017/05/25/%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%BA%9B%E6%9C%80%E8%BF%91%E7%9A%84%E7%9F%A5%E8%AF%86-JavaScript/"/>
    <id>http://yoursite.com/2017/05/25/整理了一些最近的知识-JavaScript/</id>
    <published>2017-05-25T15:34:29.000Z</published>
    <updated>2017-05-25T15:54:30.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><p>介绍js的基本数据类型。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">Undefined</span>、<span class="keyword">Null</span>、Boolean、<span class="keyword">Number</span>、<span class="keyword">String</span>、</div><div class="line">  ECMAScript <span class="number">2015</span> 新增:<span class="keyword">Symbol</span>(创建后独一无二且不可变的数据类型 )</div><div class="line">介绍js有哪些内置对象？</div></pre></td></tr></table></figure>
</li>
<li><p>Object 是 JavaScript 中所有对象的父对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">数据封装类对象：<span class="built_in">Object</span>、<span class="built_in">Array</span>、<span class="built_in">Boolean</span>、<span class="built_in">Number</span> 和 <span class="built_in">String</span></div><div class="line">其他对象：<span class="built_in">Function</span>、Arguments、<span class="built_in">Math</span>、<span class="built_in">Date</span>、<span class="built_in">RegExp</span>、<span class="built_in">Error</span></div></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>说几条写JavaScript的基本规范？</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>不要在同一行声明多个变量。</div><div class="line"><span class="number">2.</span>请使用 ===/!==来比较true/false或者数值</div><div class="line"><span class="number">3.</span>使用对象字面量替代new Array这种形式</div><div class="line"><span class="number">4.</span>不要使用全局函数。</div><div class="line"><span class="number">5.</span>Switch语句必须带有<span class="section">default</span>分支</div><div class="line"><span class="number">6.</span>函数不应该有时候有返回值，有时候没有返回值。</div><div class="line"><span class="number">7.</span>For循环必须使用大括号</div><div class="line"><span class="number">8.</span>If语句必须使用大括号</div><div class="line"><span class="number">9.</span>for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。</div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript原型，原型链 ? 有什么特点？</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，</div><div class="line">如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，</div><div class="line">于是就这样一直找下去，也就是我们平时所说的原型链的概念。</div><div class="line">关系：instance.constructor.prototype = instance.__proto__</div><div class="line"></div><div class="line">特点：</div><div class="line">JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</div><div class="line"></div><div class="line"></div><div class="line"> 当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，</div><div class="line"> 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。</div><div class="line">   function <span class="function"><span class="keyword">Func</span><span class="params">()</span>&#123;&#125;</span></div><div class="line">   <span class="function"><span class="keyword">Func</span>.<span class="title">prototype</span>.<span class="title">name</span> = "<span class="title">Sean</span>";</span></div><div class="line">   <span class="function"><span class="keyword">Func</span>.<span class="title">prototype</span>.<span class="title">getInfo</span> = <span class="title">function</span><span class="params">()</span> &#123;</span></div><div class="line">     <span class="keyword">return</span> this.name<span class="comment">;</span></div><div class="line">   &#125;</div><div class="line">   var person = new <span class="function"><span class="keyword">Func</span><span class="params">()</span>;//现在可以参考<span class="title">var</span> <span class="title">person</span> = <span class="title">Object</span>.<span class="title">create</span><span class="params">(oldObject)</span>;</span></div><div class="line">   console.<span class="built_in">log</span>(person.getInfo())<span class="comment">;//它拥有了Func的属性和方法</span></div><div class="line">   //<span class="string">"Sean"</span></div><div class="line">   console.<span class="built_in">log</span>(<span class="function"><span class="keyword">Func</span>.<span class="title">prototype</span>);</span></div><div class="line">   // <span class="function"><span class="keyword">Func</span> &#123; <span class="title">name</span>="<span class="title">Sean</span>", <span class="title">getInfo</span>=<span class="title">function</span><span class="params">()</span>&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">栈：原始数据类型（Undefined，<span class="built_in">Null</span>，<span class="built_in">Boolean</span>，Number、<span class="built_in">String</span>）</div><div class="line">堆：引用数据类型（对象、数组和函数）</div><div class="line"></div><div class="line">两种类型的区别是：存储位置不同；</div><div class="line">原始数据类型直接存储在栈(<span class="built_in">stack</span>)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</div><div class="line">引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体</div></pre></td></tr></table></figure>
</li>
<li><p>如何将字符串转化为数字，例如’12.3b’?</p>
<ul>
<li>parseFloat(‘12.3b’);</li>
<li>正则表达式，’12.3b’.match(/(\d)+(.)?(\d)+/g)[0] * 1, 但是这个不太靠谱，提供一种思路而已。</li>
</ul>
</li>
<li><p>如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">commafy</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> num &amp;&amp; num</div><div class="line">      .toString()</div><div class="line">      .replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">1</span>, $<span class="number">2</span></span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> $<span class="number">2</span> + <span class="string">','</span>;</div><div class="line">      &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如何实现数组的随机排序？<br>方法一：</p>
<figure class="highlight javascript"><figcaption><span>var arr = [1,2,3,4,5,6,7,8,9,10]; function randSort1(arr)&#123; for(var i = 0,len = arr.length;i < len; i++ )&#123; var rand = parseInt(Math.random()*len); var temp = arr[rand]; arr[rand] = arr[i]; arr[i] = temp; &#125; return arr; &#125; console.log(randSort1(arr));</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">``</span><span class="string">`</span></div><div class="line">方法二：</div><div class="line">  `<span class="string">``</span>javascript</div><div class="line">        <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">randSort2</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> mixedArray = [];</div><div class="line">            <span class="keyword">while</span>(arr.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">var</span> randomIndex = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*arr.length);</div><div class="line">                mixedArray.push(arr[randomIndex]);</div><div class="line">                arr.splice(randomIndex, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mixedArray;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(randSort2(arr));</div></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
</li>
<li><p>Javascript如何实现继承？</p>
<p>1、构造继承<br>2、原型继承<br>3、实例继承<br>4、拷贝继承</p>
<p>原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'wang'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name);<span class="comment">//得到被继承的属性</span></div></pre></td></tr></table></figure>
</li>
<li><p>JavaScript继承的几种实现方式？</p>
</li>
</ul>
<p>参考：构造函数的继承，非构造函数的继承；</p>
<ul>
<li><p>javascript创建对象的几种方式？</p>
<p>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。</p>
</li>
</ul>
<p> 1、对象字面量的方式</p>
<pre><code>person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};
</code></pre><p> 2、用function来模拟无参的构造函数</p>
<pre><code>function Person(){}
var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class
person.name=&quot;Mark&quot;;
person.age=&quot;25&quot;;
person.work=function(){
alert(person.name+&quot; hello...&quot;);
}
person.work();
</code></pre><p> 3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</p>
<pre><code>function Pet(name,age,hobby){
   this.name=name;//this作用域：当前对象
   this.age=age;
   this.hobby=hobby;
   this.eat=function(){
      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);
   }
}
var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象
maidou.eat();//调用eat方法
</code></pre><p> 4、用工厂方式来创建（内置对象）</p>
<pre><code>var wcDog =new Object();
wcDog.name=&quot;旺财&quot;;
wcDog.age=3;
wcDog.work=function(){
  alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);
}
wcDog.work();
</code></pre><p> 5、用原型方式来创建</p>
<pre><code>function Dog(){

 }
 Dog.prototype.name=&quot;旺财&quot;;
 Dog.prototype.eat=function(){
 alert(this.name+&quot;是个吃货&quot;);
 }
 var wangcai =new Dog();
 wangcai.eat();
</code></pre><p> 6、用混合方式来创建</p>
<pre><code>function Car(name,price){
  this.name=name;
  this.price=price;
}
 Car.prototype.sell=function(){
   alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);
  }
var camry =new Car(&quot;凯美瑞&quot;,27);
camry.sell();
</code></pre><ul>
<li><p>Javascript作用链域?</p>
<p>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。<br>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，<br>直至全局函数，这种组织形式就是作用域链。</p>
</li>
<li>谈谈This对象的理解。</li>
</ul>
<p>this总是指向函数的直接调用者（而非间接调用者）；</p>
<p>如果有new关键字，this指向new出来的那个对象；</p>
<p>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>
<ul>
<li><p>eval是做什么的？</p>
<p>它的功能是把对应的字符串解析成JS代码并运行；<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。<br>由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(‘(‘+ str +’)’);</p>
</li>
<li><p>什么是window对象? 什么是document对象?</p>
<p>window对象是指浏览器打开的窗口。<br>document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。</p>
</li>
<li><p>null，undefined 的区别？</p>
<p>null       表示一个对象是“没有值”的值，也就是值为“空”；<br>undefined  表示一个变量声明了没有初始化(赋值)；</p>
<p>undefined不是一个有效的JSON，而null是；<br>undefined的类型(typeof)是undefined；<br>null的类型(typeof)是object；</p>
</li>
</ul>
<p> Javascript将未赋值的变量默认值设为undefined；<br> Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。</p>
<p> typeof undefined<br>    //“undefined”<br>    undefined :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；<br>    例如变量被声明了，但没有赋值时，就等于undefined</p>
<p> typeof null<br>    //“object”<br>    null : 是一个对象(空对象, 没有任何属性和方法)；<br>    例如作为函数的参数，表示该函数的参数不是对象；</p>
<p> 注意：<br>    在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined<br>    null == undefined // true<br>    null === undefined // false</p>
<p> 再来一个例子：</p>
<pre><code>null
Q：有张三这个人么？
A：有！
Q：张三有房子么？
A：没有！

undefined
Q：有张三这个人么？
A：有！
Q: 张三有多少岁？
A: 不知道（没有被告诉）
</code></pre><p>参考阅读：undefined与null的区别</p>
<ul>
<li><p>写一个通用的事件侦听器函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// event(事件)工具集，来源：github.com/markyun</span></div><div class="line">markyun.Event = &#123;</div><div class="line">    <span class="comment">// 页面加载完成后</span></div><div class="line">    readyEvent : <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fn==<span class="literal">null</span>) &#123;</div><div class="line">            fn=<span class="built_in">document</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="built_in">window</span>.onload = fn;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                oldonload();</div><div class="line">                fn();</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></div><div class="line">    <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></div><div class="line">    addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">            <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></div><div class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                handler.call(element);</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">'on'</span> + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 移除事件</span></div><div class="line">    removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</div><div class="line">            element.detachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></div><div class="line">    stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ev.stopPropagation) &#123;</div><div class="line">            ev.stopPropagation();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ev.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 取消事件的默认行为</span></div><div class="line">    preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            event.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获取事件目标</span></div><div class="line">    getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></div><div class="line">    getEvent : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</div><div class="line">        <span class="keyword">if</span> (!ev) &#123;</div><div class="line">            <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</div><div class="line">            <span class="keyword">while</span> (c) &#123;</div><div class="line">                ev = c.arguments[<span class="number">0</span>];</div><div class="line">                <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                c = c.caller;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ev;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>
<p>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，<br>其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回数字结果值】;<br>但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。</p>
<p>function parseInt(str, radix) {<br>   return str+’-‘+radix;<br>};<br>var a=[“1”, “2”, “3”];<br>a.map(parseInt);  // [“1-0”, “2-1”, “3-2”] 不能大于radix</p>
<p>因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN<br>所以[“1”, “2”, “3”].map(parseInt) 答案也就是：[1, NaN, NaN]</p>
</li>
<li><p>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>
<ol>
<li>我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。</li>
<li>事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；</li>
<li>ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）</li>
</ol>
</li>
<li><p>什么是闭包（closure），为什么要用它？</p>
<p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。</p>
<p>闭包的特性：</p>
<p>1.函数内再嵌套函数<br>2.内部函数可以引用外层的参数和变量<br>3.参数和变量不会被垃圾回收机制回收</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//li节点的onclick事件都能正确的弹出当前被点击的li索引</div><div class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"testUL"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> index = 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">   <span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">   <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;nodes.length;i+= <span class="number">1</span>)&#123;</div><div class="line">       nodes[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                 <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(i);</div><div class="line">                 &#125; <span class="comment">//不用闭包的话，值每次都是4</span></div><div class="line">               &#125;)(i);</div><div class="line">   &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在<br>使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源<br>因为say667()的内部函数的执行需要依赖say667()中的变量<br>这是对闭包作用的非常直白的描述</p>
<p> function say667() {<br>  // Local variable that ends up within closure<br>  var num = 666;<br>  var sayAlert = function() {</p>
<pre><code>alert(num);
</code></pre><p>  }<br>  num++;<br>  return sayAlert;<br>}</p>
<p>var sayAlert = say667();<br>sayAlert()//执行结果应该弹出的667</p>
</li>
<li><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>
<p>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,</p>
<p>使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。<br>默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;<br>全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；<br>消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;</p>
<p>提高编译器效率，增加运行速度；<br>为未来新版本的Javascript标准化做铺垫。</p>
</li>
<li><p>如何判断一个对象是否属于某个类？</p>
<p> 使用instanceof （待完善）<br>  if(a instanceof Person){</p>
<pre><code>alert(&apos;yes&apos;);
</code></pre><p>  }</p>
</li>
<li><p>new操作符具体干了什么呢?</p>
<p>   1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>   2、属性和方法被加入到 this 引用的对象中。<br>   3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p>
<p>var obj  = {};<br>obj.<strong>proto</strong> = Base.prototype;<br>Base.call(obj);</p>
</li>
<li><p>用原生JavaScript的实现过什么功能吗？</p>
</li>
<li><p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p>
<p>hasOwnProperty</p>
<p>javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。<br>使用方法：<br>object.hasOwnProperty(proName)<br>其中参数object是必选项。一个对象的实例。<br>proName是必选项。一个属性名称的字符串值。</p>
<p>如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。</p>
</li>
<li><p>JSON 的了解？<br>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小<br>如：{“age”:”12”, “name”:”back”}</p>
<p>JSON字符串转换为JSON对象:<br>var obj =eval(‘(‘+ str +’)’);<br>var obj = str.parseJSON();<br>var obj = JSON.parse(str);</p>
<p>JSON对象转换为JSON字符串：<br>var last=obj.toJSONString();<br>var last=JSON.stringify(obj);</p>
</li>
<li><p>js延迟加载的方式有哪些？</p>
<p>defer和async、动态创建DOM方式（用得最多）、按需异步载入js</p>
</li>
<li><p>Ajax 是什么? 如何创建一个Ajax？</p>
<p>ajax的全称：Asynchronous Javascript And XML。<br>异步传输+js+xml。<br>所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。</p>
<p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息<br>(3)设置响应HTTP请求状态变化的函数<br>(4)发送HTTP请求<br>(5)获取异步调用返回的数据<br>(6)使用JavaScript和DOM实现局部刷新</p>
</li>
<li><p>Ajax 解决浏览器缓存问题？</p>
<p>1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“If-Modified-Since”,”0”)。</p>
<p>2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(“Cache-Control”,”no-cache”)。</p>
<p>3、在URL后面加上一个随机数： “fresh=” + Math.random();。</p>
<p>4、在URL后面加上时间搓：”nowtime=” + new Date().getTime();。</p>
<p>5、如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</p>
</li>
<li>同步和异步的区别?</li>
</ul>
<p>同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p>
<p>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。</p>
<p>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。</p>
<p>（待完善）</p>
<ul>
<li><p>如何解决跨域问题?</p>
<p>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面</p>
</li>
<li><p>页面编码和被请求的资源编码如果不一致如何处理？</p>
</li>
<li><p>模块化开发怎么做？</p>
</li>
</ul>
<p>立即执行函数,不暴露私有成员</p>
<pre><code>var module1 = (function(){
　　　　var _count = 0;
　　　　var m1 = function(){
　　　　　　//...
　　　　};
　　　　var m2 = function(){
　　　　　　//...
　　　　};
　　　　return {
　　　　　　m1 : m1,
　　　　　　m2 : m2
　　　　};
　　})();
</code></pre><p>（待完善）</p>
<ul>
<li>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</li>
</ul>
<p>AMD 规范在这里：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">https://github.com/amdjs/amdjs-api/wiki/AMD</a><br>CMD 规范在这里：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a><br> Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。</p>
<p>  区别：</p>
<pre><code>1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.
2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：
</code></pre><p> // CMD<br> define(function(require, exports, module) {<br>     var a = require(‘./a’)<br>     a.doSomething()<br>     // 此处略去 100 行<br>     var b = require(‘./b’) // 依赖可以就近书写<br>     b.doSomething()<br>     // …<br> })</p>
<p> // AMD 默认推荐<br> define([‘./a’, ‘./b’], function(a, b) { // 依赖必须一开始就写好<br>     a.doSomething()<br>     // 此处略去 100 行<br>     b.doSomething()<br>     // …<br> })</p>
<ul>
<li><p>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</p>
<p>参考：<a href="http://annn.me/how-to-realize-cmd-loader/" target="_blank" rel="external">http://annn.me/how-to-realize-cmd-loader/</a></p>
</li>
<li><p>JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</p>
</li>
<li><p>谈一谈你对ECMAScript6的了解？</p>
</li>
<li><p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>
</li>
<li><p>异步加载JS的方式有哪些？</p>
<p> (1) defer，只支持IE</p>
<p> (2) async：</p>
<p> (3) 创建script，插入到DOM中，加载完毕后callBack<br>documen.write和 innerHTML的区别</p>
<p>document.write只能重绘整个页面</p>
<p>innerHTML可以重绘页面的一部分</p>
</li>
<li><p>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>
<p>（1）创建新节点<br>  createDocumentFragment()    //创建一个DOM片段<br>  createElement()   //创建一个具体的元素<br>  createTextNode()   //创建一个文本节点<br>（2）添加、移除、替换、插入<br>  appendChild()<br>  removeChild()<br>  replaceChild()<br>  insertBefore() //在已有的子节点前插入一个新的子节点<br>（3）查找<br>  getElementsByTagName()    //通过标签名称<br>  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)<br>  getElementById()    //通过元素Id，唯一性</p>
</li>
<li><ul>
<li><ul>
<li>.call() 和 .apply() 的区别？</li>
</ul>
<p>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p>
<p>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>
<p>function add(a,b)<br>{</p>
<pre><code>alert(a+b);
</code></pre><p>}</p>
<p>function sub(a,b)<br>{</p>
<pre><code>alert(a-b);
</code></pre><p>}</p>
<p>add.call(sub,3,1);</p>
</li>
</ul>
</li>
<li><p>数组和对象有哪些原生方法，列举一下？</p>
</li>
<li><p>JS 怎么实现一个类。怎么实例化这个类</p>
</li>
<li><p>JavaScript中的作用域与变量声明提升？</p>
</li>
<li><p>如何编写高性能的Javascript？</p>
</li>
<li><p>那些操作会造成内存泄漏？</p>
</li>
<li><p>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</p>
</li>
<li><p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>
</li>
<li><p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>
</li>
<li><p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>
</li>
<li><p>jquery.extend 与 jquery.fn.extend的区别？</p>
<ul>
<li>jquery.extend 为jquery类添加类方法，可以理解为添加静态方法</li>
<li>jquery.fn.extend:<br>源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数<br>使用：<br>jquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用。</li>
</ul>
</li>
<li><ul>
<li>jQuery 的队列是如何实现的？队列可以用在哪些地方？</li>
</ul>
</li>
<li><ul>
<li>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</li>
</ul>
</li>
<li><ul>
<li>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</li>
</ul>
</li>
<li><ul>
<li>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</li>
</ul>
</li>
<li><ul>
<li>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</li>
</ul>
</li>
<li><ul>
<li>针对 jQuery性能的优化方法？</li>
</ul>
</li>
<li><ul>
<li>Jquery与jQuery UI 有啥区别？</li>
</ul>
<p>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。</p>
<p>*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。<br>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</p>
</li>
<li><p>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>
</li>
<li><p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>
</li>
<li><p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>
<p>  $.fn.stringifyArray = function(array) {</p>
<pre><code>return JSON.stringify(array)
</code></pre><p>  }</p>
<p>  $.fn.parseArray = function(array) {</p>
<pre><code>return JSON.parse(array)
</code></pre><p>  }</p>
<p>  然后调用：<br>  $(“”).stringifyArray(array)</p>
</li>
<li><ul>
<li>jQuery和Zepto的区别？各自的使用场景？</li>
</ul>
</li>
<li><ul>
<li>针对 jQuery 的优化方法？</li>
</ul>
<p>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。</p>
<p>*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。<br>比如：var str=$(“a”).attr(“href”);</p>
<p>*for (var i = size; i &lt; arr.length; i++) {}<br>for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：<br>for (var i = size, length = arr.length; i &lt; length; i++) {}</p>
</li>
<li><p>Zepto的点透问题如何解决？</p>
</li>
<li><p>jQueryUI如何自定义组件?</p>
</li>
<li><p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>
</li>
<li><p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>
<p>this === window ? ‘browser’ : ‘node’;</p>
<p>通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中<br>移动端最小触控区域是多大？</p>
</li>
</ul>
<p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>
<p> jquery stop(): 如：$(“#div”).stop().animate({width:”100px”},100);</p>
<ul>
<li><p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>
</li>
<li><p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>
</li>
<li><p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>
</li>
<li><p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>
</li>
<li><p>解释JavaScript中的作用域与变量声明提升？</p>
</li>
<li><p>那些操作会造成内存泄漏？</p>
<p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p>
<p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p>
</li>
<li><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>
<ul>
<li>多个事件同一个函数：<br>$(“div”).on(“click mouseover”, function(){});</li>
<li>多个事件不同函数<br>$(“div”).on({<pre><code>click: function(){},
mouseover: function(){}
</code></pre>});</li>
</ul>
</li>
<li><p>Node.js的适用场景？</p>
</li>
<li><p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>
</li>
<li><p>解释一下 Backbone 的 MVC 实现方式？</p>
</li>
<li><p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>
</li>
<li><p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>
<p>Chrome,Safari浏览器内核。</p>
</li>
<li><p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>
</li>
<li><p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>
</li>
<li><p>简述一下 Handlebars 的基本用法？</p>
</li>
<li><p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>
</li>
<li><p>用js实现千位分隔符?(来源：前端农民工，提示：正则+replace)</p>
<p>参考：<a href="http://www.tuicool.com/articles/ArQZfui" target="_blank" rel="external">http://www.tuicool.com/articles/ArQZfui</a><br>function commafy(num) {</p>
<pre><code>return num &amp;&amp; num
    .toString()
    .replace(/(\d)(?=(\d{3})+\.)/g, function($0, $1) {
        return $1 + &quot;,&quot;;
    });
</code></pre><p>}<br>console.log(commafy(1234567.90)); //1,234,567.90</p>
</li>
<li><p>检测浏览器版本版本有哪些方式？</p>
<p>功能检测、userAgent特征检测</p>
<p>比如：navigator.userAgent<br>//“Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36<br>  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36”</p>
</li>
<li><p>What is a Polyfill?</p>
<p>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。<br>例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，<br>所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，<br>一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。</p>
</li>
<li><p>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>
<p>比如： html5shiv、Geolocation、Placeholder</p>
</li>
<li>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</li>
</ul>
<p>使用JS实现获取文件扩展名？</p>
<p>  function getFileExtension(filename) {<br>    return filename.slice((filename.lastIndexOf(“.”) - 1 &gt;&gt;&gt; 0) + 2);<br>  }</p>
<p>  String.lastIndexOf() 方法返回指定值（本例中的’.’）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。<br>  对于’filename’和’.hiddenfile’，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。<br>  String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为””。</p>
<h2 id="ECMAScript6-相关"><a href="#ECMAScript6-相关" class="headerlink" title="ECMAScript6 相关"></a>ECMAScript6 相关</h2><ul>
<li><p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>
<p>两等号判等，会在比较时进行类型转换；<br>三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）；</p>
<p>Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，<br>但 Object.is(NaN, NaN) 会返回 true.</p>
<p>Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。<br>前端框架相关</p>
</li>
<li><ul>
<li>react-router 路由系统的实现原理？</li>
</ul>
</li>
<li><ul>
<li>React中如何解决第三方类库的问题?</li>
</ul>
</li>
</ul>
<p>其他问题</p>
<ul>
<li><p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>
</li>
<li><p>你遇到过比较难的技术问题是？你是如何解决的？</p>
</li>
<li><p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>
</li>
<li><p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>
</li>
<li><p>页面重构怎么操作？</p>
<p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。<br>也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p>
<p>对于传统的网站来说重构通常是：</p>
<p>表格(table)布局改为DIV+CSS<br>使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)<br>对于移动平台的优化<br>针对于SEO进行优化<br>深层次的网站重构应该考虑的方面</p>
<p>减少代码间的耦合<br>让代码保持弹性<br>严格按规范编写代码<br>设计可扩展的API<br>代替旧有的框架、语言(如VB)<br>增强用户体验<br>通常来说对于速度的优化也包含在重构中</p>
<p>压缩JS、CSS、image等前端资源(通常是由服务器来解决)<br>程序的性能优化(如数据读写)<br>采用CDN来加速资源加载<br>对于JS DOM的优化<br>HTTP服务器的文件缓存</p>
</li>
<li><p>列举IE与其他浏览器不一样的特性？</p>
<p>1、事件不同之处：</p>
<pre><code>触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；
</code></pre><p>  获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；</p>
<p>  阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；</p>
<p>  停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；</p>
</li>
<li><p>99%的网站都需要被重构是那本书上写的？</p>
<p>网站重构：应用web标准进行设计（第2版）</p>
</li>
<li><p>什么叫优雅降级和渐进增强？</p>
<p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。<br>如：border-shadow</p>
<p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。<br>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；</p>
</li>
<li><p>是否了解公钥加密和私钥加密。</p>
<p>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;<br>HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。</p>
</li>
<li><p>WEB应用从服务器主动推送Data到客户端有那些方式？</p>
<p>html5提供的Websocket<br>不可见的iframe<br>WebSocket通过Flash<br>XHR长时间连接<br>XHR Multipart Streaming<br><script>标签的长时间连接(可跨域)</p>
</li>
<li><p>对Node的优点和缺点提出了自己的看法？</p>
<p>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，<br>  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。<br>  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，<br>  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。</p>
<p>*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，<br>  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。</p>
</li>
<li><p>你有用过哪些前端性能优化的方法？</p>
<p>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</p>
<p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p>
<p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p>
<p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p>
<p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p>
<p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p>
<p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>
<p>  （8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。<br>  对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。</p>
</li>
<li><p>http状态码有那些？分别代表是什么意思？</p>
<p>  简单版<br>  [</p>
<pre><code>100  Continue   继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
200  OK         正常返回信息
201  Created    请求成功并且服务器创建了新的资源
202  Accepted   服务器已接受请求，但尚未处理
301  Moved Permanently  请求的网页已永久移动到新位置。
302 Found       临时性重定向。
303 See Other   临时性重定向，且总是使用 GET 请求新的 URI。
304  Not Modified 自从上次请求后，请求的网页未修改过。

400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
401 Unauthorized 请求未授权。
403 Forbidden   禁止访问。
404 Not Found   找不到如何与 URI 相匹配的资源。

500 Internal Server Error  最常见的服务器端错误。
503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
</code></pre><p>  ]</p>
<p>  完整版<br>  1**(信息类)：表示接收到请求并且继续处理<br>  100——客户必须继续发出请求<br>  101——客户要求服务器根据请求转换HTTP协议版本</p>
<p>  2**(响应成功)：表示动作被成功接收、理解和接受<br>  200——表明该请求被成功地完成，所请求的资源发送回客户端<br>  201——提示知道新文件的URL<br>  202——接受和处理、但处理未完成<br>  203——返回信息不确定或不完整<br>  204——请求收到，但返回信息为空<br>  205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件<br>  206——服务器已经完成了部分用户的GET请求</p>
<p>  3**(重定向类)：为了完成指定的动作，必须接受进一步处理<br>  300——请求的资源可在多处得到<br>  301——本网页被永久性转移到另一个URL<br>  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。<br>  303——建议客户访问其他URL或访问方式<br>  304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用<br>  305——请求的资源必须从服务器指定的地址得到<br>  306——前一版本HTTP中使用的代码，现行版本中不再使用<br>  307——申明请求的资源临时性删除</p>
<p>  4**(客户端错误类)：请求包含错误语法或不能正确执行<br>  400——客户端请求有语法错误，不能被服务器所理解<br>  401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>  HTTP 401.1 - 未授权：登录失败<br>  　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败<br>  　　HTTP 401.3 - ACL 禁止访问资源<br>  　　HTTP 401.4 - 未授权：授权被筛选器拒绝<br>  HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败<br>  402——保留有效ChargeTo头响应<br>  403——禁止访问，服务器收到请求，但是拒绝提供服务<br>  HTTP 403.1 禁止访问：禁止可执行访问<br>  　　HTTP 403.2 - 禁止访问：禁止读访问<br>  　　HTTP 403.3 - 禁止访问：禁止写访问<br>  　　HTTP 403.4 - 禁止访问：要求 SSL<br>  　　HTTP 403.5 - 禁止访问：要求 SSL 128<br>  　　HTTP 403.6 - 禁止访问：IP 地址被拒绝<br>  　　HTTP 403.7 - 禁止访问：要求客户证书<br>  　　HTTP 403.8 - 禁止访问：禁止站点访问<br>  　　HTTP 403.9 - 禁止访问：连接的用户过多<br>  　　HTTP 403.10 - 禁止访问：配置无效<br>  　　HTTP 403.11 - 禁止访问：密码更改<br>  　　HTTP 403.12 - 禁止访问：映射器拒绝访问<br>  　　HTTP 403.13 - 禁止访问：客户证书已被吊销<br>  　　HTTP 403.15 - 禁止访问：客户访问许可过多<br>  　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效<br>  HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效<br>  404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL<br>  405——用户在Request-Line字段定义的方法不允许<br>  406——根据用户发送的Accept拖，请求资源不可访问<br>  407——类似401，用户必须首先在代理服务器上得到授权<br>  408——客户端没有在用户指定的饿时间内完成请求<br>  409——对当前资源状态，请求不能完成<br>  410——服务器上不再有此资源且无进一步的参考地址<br>  411——服务器拒绝用户定义的Content-Length属性请求<br>  412——一个或多个请求头字段在当前请求中错误<br>  413——请求的资源大于服务器允许的大小<br>  414——请求的资源URL长于服务器允许的长度<br>  415——请求资源不支持请求项目格式<br>  416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段<br>  417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</p>
<p>  5**(服务端错误类)：服务器不能正确执行一个正确的请求<br>  HTTP 500 - 服务器遇到错误，无法完成请求<br>  　　HTTP 500.100 - 内部服务器错误 - ASP 错误<br>  　　HTTP 500-11 服务器关闭<br>  　　HTTP 500-12 应用程序重新启动<br>  　　HTTP 500-13 - 服务器太忙<br>  　　HTTP 500-14 - 应用程序无效<br>  　　HTTP 500-15 - 不允许请求 global.asa<br>  　　Error 501 - 未实现<br>  HTTP 502 - 网关错误<br>  HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常<br>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p>
<p>  注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，<br>  而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、<br>  到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；</p>
<p>  详细版：<br>  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;<br>  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;</p>
<pre><code>3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;
</code></pre><p>  4、进行HTTP协议会话，客户端发送报头(请求报头);</p>
<pre><code>5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;
6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;
</code></pre><p>  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;</p>
<pre><code>8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;
9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;
10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。
</code></pre><p>  简洁版：<br>  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；<br>  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；<br>  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；<br>  载入解析到的资源文件，渲染页面，完成。<br>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p>
</li>
</ul>
<p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>
<p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>
<p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>
<p>  Sublime Text 3 + 相关插件编写前端代码<br>  Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能<br>  Node.js+Gulp<br>  git 用于版本控制和Code Review<br>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>
<p>  前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。<br>  1、实现界面交互<br>  2、提升用户体验<br>  3、有了Node.js，前端可以实现服务端的一些事情</p>
<p>  前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>
<p>  参与项目，快速高质量完成实现效果图，精确到1px；</p>
<p>  与团队成员，UI设计，产品经理的沟通；</p>
<p>  做好的页面结构，页面重构和用户体验；</p>
<p>  处理hack，兼容、写出优美的代码格式；</p>
<p>  针对服务器的优化、拥抱最新前端技术。<br>你怎么看待Web App 、hybrid App、Native App？</p>
<p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>
<p>你对加班的看法？</p>
<p>  加班就像借钱，原则应当是——救急不救穷<br>平时如何管理你的项目？</p>
<p>  先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；</p>
<p>  编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>
<p>  标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>
<p>  页面进行标注（例如 页面 模块 开始和结束）；</p>
<p>  CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；</p>
<p>  JS 分文件夹存放 命名以该JS功能为准的英文翻译。</p>
<p>  图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理<br>如何设计突发大规模并发架构？</p>
<p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>
<p>说说最近最流行的一些东西吧？常去哪些网站？</p>
<pre><code>ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化
</code></pre><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p>
<p>移动端（Android IOS）怎么做好用户体验?</p>
<p>  清晰的视觉纵线、<br>  信息的分组、极致的减法、<br>  利用选择代替输入、<br>  标签及文字的排布方式、<br>  依靠明文确认密码、<br>  合理的键盘利用、<br>简单描述一下你做过的移动APP项目研发流程？</p>
<p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>
<p>你认为怎样才是全端工程师（Full Stack developer）？</p>
<p>介绍一个你最得意的作品吧？</p>
<p>你有自己的技术博客吗，用了哪些技术？</p>
<p>对前端安全有什么看法？</p>
<p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>
<p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>
<p>最近在学什么东西？</p>
<p>你的优点是什么？缺点是什么？</p>
<p>如何管理前端团队?</p>
<p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>
</script></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;介绍js的基本数据类型。&lt;/p&gt;
&lt;figure class=&quot;highlight mathematica&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;Undefined&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;Null&lt;/span&gt;、Boolean、&lt;span class=&quot;keyword&quot;&gt;Number&lt;/span&gt;、&lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;、&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ECMAScript &lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt; 新增:&lt;span class=&quot;keyword&quot;&gt;Symbol&lt;/span&gt;(创建后独一无二且不可变的数据类型 )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;介绍js有哪些内置对象？&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object 是 JavaScript 中所有对象的父对象&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;数据封装类对象：&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt; 和 &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;其他对象：&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;、Arguments、&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;、&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理了一些最近的知识_HTML</title>
    <link href="http://yoursite.com/2017/05/25/%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%BA%9B%E6%9C%80%E8%BF%91%E7%9A%84%E7%9F%A5%E8%AF%86-HTML/"/>
    <id>http://yoursite.com/2017/05/25/整理了一些最近的知识-HTML/</id>
    <published>2017-05-25T15:33:46.000Z</published>
    <updated>2017-05-25T15:35:40.969Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTML&amp;CSS：</div><div class="line"><span class="code">    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、</span></div><div class="line"><span class="code">    HTML5、CSS3、Flexbox</span></div><div class="line"></div><div class="line">JavaScript：</div><div class="line"><span class="code">    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、</span></div><div class="line"><span class="code">    DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs</span></div><div class="line"></div><div class="line">其他：</div><div class="line"><span class="code">    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力</span></div></pre></td></tr></table></figure>
 <a id="more"></a>
<p>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。<br>2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。<br>3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。<br>4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。<br>5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。<br>6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型<br>7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们<br>8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。<br>9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。<br>10、JSON —— 作用、用途、设计结构。</p>
<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。<br>资料答案不够正确和全面，欢迎欢迎Star和提交issues。<br>格式不断修改更新中。<br>更新记录：<br>2017年5月25日：整理了最近的一些HTML、CSS、JavaScript的知识点</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ul>
<li><p>Doctype作用？标准模式于建嵘模式各有什么区别？</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(1) <span class="meta">&lt;!Doctype&gt;</span> 位于HTML标签的第一行，处于HTML标签之前，告知浏览器的解析器用什么文档标准解析这个文档DOCTYPE不存在或格式不正确导致文档以兼容模式呈现。</div><div class="line">(2) 标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行在兼容模式中，页面页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</div></pre></td></tr></table></figure>
</li>
<li><p>HTML5为什么只需要写&lt;!DOCTYPE HTML&gt;?<br>(1)HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；<br>(2)而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>
</li>
<li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">首先：CSS规范规定，每个元素都有<span class="attribute">display</span>属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。</div><div class="line"></div><div class="line">  （<span class="number">1</span>）行内元素有：<span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">span</span> <span class="selector-tag">img</span> <span class="selector-tag">input</span> select strong（强调的语气）</div><div class="line">  （<span class="number">2</span>）块级元素有：<span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> <span class="selector-tag">dd</span> <span class="selector-tag">h1</span> <span class="selector-tag">h2</span> <span class="selector-tag">h3</span> h4…<span class="selector-tag">p</span></div><div class="line"></div><div class="line">  （<span class="number">3</span>）常见的空元素：</div><div class="line">    &lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</div><div class="line">    鲜为人知的是：</div><div class="line">    &lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;</div><div class="line"></div><div class="line">  不同浏览器（版本）、HTML4（<span class="number">5</span>）、CSS2等实际略有差异</div><div class="line">  参考: http:<span class="comment">//stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</span></div></pre></td></tr></table></figure>
</li>
<li><p>页面导入样式时，使用link和@import有什么区别？</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1)<span class="selector-tag">link</span>属于<span class="selector-tag">XHTML</span>标签，除了加载<span class="selector-tag">CSS</span>外，还能用于定义<span class="selector-tag">RSS</span>, 定义<span class="selector-tag">rel</span>连接属性等作用；而@<span class="keyword">import</span>是<span class="keyword">CSS</span>提供的，只能用于加载<span class="keyword">CSS</span>;</div><div class="line">(2)页面被加载的时，<span class="selector-tag">link</span>会同时被加载，而@<span class="keyword">import</span>引用的<span class="keyword">CSS</span>会等到页面被加载完再加载;</div><div class="line">(3)<span class="selector-tag">import</span>是<span class="selector-tag">CSS2</span><span class="selector-class">.1</span> 提出的，只在<span class="selector-tag">IE5</span>以上才能被识别，而<span class="selector-tag">link</span>是<span class="selector-tag">XHTML</span>标签，无兼容问题;</div></pre></td></tr></table></figure>
</li>
<li><p>介绍一下你对浏览器内核的理解？</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和<span class="keyword">JS</span>引擎。</div><div class="line">  渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</div><div class="line"></div><div class="line">  <span class="keyword">JS</span>引擎则：解析和执行javascript来实现网页的动态效果。</div><div class="line"></div><div class="line">  最开始渲染引擎和<span class="keyword">JS</span>引擎并没有区分的很明确，后来<span class="keyword">JS</span>引擎越来越独立，内核就倾向于只指渲染引擎。</div></pre></td></tr></table></figure>
</li>
<li><p>常见的浏览器内核有哪些？</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</div><div class="line">  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</div><div class="line">  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]</div><div class="line">  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</div><div class="line"></div><div class="line">详细文章：[<span class="string">浏览器内核的解析和对比</span>](<span class="link">http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</div><div class="line">     绘画 canvas;</div><div class="line">     用于媒介回放的 video 和 audio 元素;</div><div class="line">     本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;</div><div class="line">       sessionStorage 的数据在浏览器关闭后自动删除;</div><div class="line">     语意化更好的内容元素，比如 article、footer、header、nav、section;</div><div class="line">     表单控件，calendar、date、time、email、url、search;</div><div class="line">     新的技术webworker, websocket, Geolocation;</div><div class="line"></div><div class="line">   移除的元素：</div><div class="line">     纯表现的元素：basefont，big，center，font, s，strike，tt，u;</div><div class="line">     对可用性产生负面影响的元素：frame，frameset，noframes；</div><div class="line"></div><div class="line"> * 支持HTML5新标签：</div><div class="line">    IE8/IE7/IE6支持通过<span class="built_in">document</span>.createElement方法产生的标签，</div><div class="line">        可以利用这一特性让这些浏览器支持HTML5新标签，</div><div class="line">        浏览器支持新标签后，还需要添加标签默认的样式。</div><div class="line"></div><div class="line">      当然也可以直接使用成熟的框架、比如html5shim;</div><div class="line">    <span class="xml"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span></div><div class="line">       &lt;script&gt; src="http://html5shim.googlecode.com/svn/trunk/html5.js"&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line"></div><div class="line"> * 如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素</div></pre></td></tr></table></figure>
</li>
<li><p>简述一下你对HTML语义化的理解？<br>用正确的标签做正确的事情。<br>html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;<br>即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;<br>搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>
</li>
<li>HTML5的离线储存怎么使用，工作原理能不能解释一下？<br>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br>原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</li>
</ul>
<p>  如何使用：<br>  1、页面头部像下面一样加入一个manifest的属性；<br>  2、在cache.manifest文件的编写离线存储的资源；<br>    CACHE MANIFEST</p>
<pre><code>#v0.11
CACHE:
js/app.js
css/style.css
NETWORK:
resourse/logo.png
FALLBACK:
/ /offline.html
</code></pre><p>  3、在离线状态时，操作window.applicationCache进行需求实现。</p>
<ul>
<li><p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？<br>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。<br>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。<br>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p>
<p>存储大小：<br>  cookie数据大小不能超过4k。<br>  sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>
<p>有期时间：<br>  localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；<br>  sessionStorage  数据在当前浏览器窗口关闭后自动删除。<br>  cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭.</p>
</li>
<li><p>iframe有那些缺点？</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">*iframe会阻塞主页面的Onload事件；</span></div><div class="line"><span class="comment">  *搜索引擎的检索程序无法解读这种页面，不利于SEO;</span></div><div class="line"></div><div class="line"><span class="comment">  *iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</span></div><div class="line"></div><div class="line">  使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript</div><div class="line">  动态给iframe添加src属性值，这样可以绕开以上两个问题。</div></pre></td></tr></table></figure>
</li>
<li><p>Label的作用是什么？是怎么用的？</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">label</span><span class="bash">标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。</span></div><div class="line"></div><div class="line">&lt;<span class="keyword">label</span><span class="bash"> <span class="keyword">for</span>=<span class="string">"Name"</span>&gt;Number:&lt;/label&gt;</span></div><div class="line">&lt;input type=“text“name=<span class="string">"Name"</span> id=<span class="string">"Name"</span>/&gt;</div><div class="line"></div><div class="line">&lt;<span class="keyword">label</span><span class="bash">&gt;Date:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"B"</span>/&gt;&lt;/label&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>HTML5的form如何关闭自动完成功能？<br>  给不想要提示的 form 或某个 input 设置为 autocomplete=off。</p>
</li>
<li><p>如何实现浏览器内多个标签页之间的通信? (阿里)<br>WebSocket、SharedWorker；<br>也可以调用localstorge、cookies等本地存储方式；</p>
<p>localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，<br>我们通过监听事件，控制它的值来进行页面信息通信；<br>注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；</p>
</li>
<li>webSocket如何兼容低浏览器？(阿里)<br>Adobe Flash Socket 、<br>ActiveX HTMLFile (IE) 、<br>基于 multipart 编码发送 XHR 、<br>基于长轮询的 XHR</li>
<li>页面可见性（Page Visibility API） 可以有哪些用途？<br>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;<br>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</li>
<li>如何在页面上实现一个圆形的可点击区域？<br>1、map+area或者svg<br>2、border-radius<br>3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
<li>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:1px;overflow:hidden;background:red"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如下：<br>  <div style="height:1px;overflow:hidden;background:red"></div></p>
<ul>
<li>网页验证码是干嘛的，是为了解决什么安全问题。<br>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；<br>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。</li>
<li><p>title与h1的区别、b与strong的区别、i与em的区别？<br>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；</p>
<p>strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：<strong>会重读，而<b>是展示强调内容。</b></strong></p>
<p>i内容展示为斜体，em表示强调的文本；</p>
<p>Physical Style Elements – 自然样式标签<br>b, i, u, s, pre<br>Semantic Style Elements – 语义样式标签<br>strong, em, ins, del, code<br>应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTML&amp;amp;CSS：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    HTML5、CSS3、Flexbox&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JavaScript：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;其他：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理了一些最近的知识_CSS</title>
    <link href="http://yoursite.com/2017/05/25/%E6%95%B4%E7%90%86%E4%BA%86%E4%B8%80%E4%BA%9B%E6%9C%80%E8%BF%91%E7%9A%84%E7%9F%A5%E8%AF%86-CSS/"/>
    <id>http://yoursite.com/2017/05/25/整理了一些最近的知识-CSS/</id>
    <published>2017-05-25T15:33:33.000Z</published>
    <updated>2017-05-25T15:37:26.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul>
<li>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？<br>（1）有两种， IE 盒子模型、W3C 盒子模型；<br>（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；<br>（3）区  别： IE的content部分把 border 和 padding计算了进去;</li>
<li><p>CSS选择符有哪些？哪些属性可以继承？</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-  1<span class="selector-class">.id</span>选择器（ # myid）</div><div class="line">   2.类选择器（<span class="selector-class">.myclassname</span>）</div><div class="line">   3.标签选择器（<span class="selector-tag">div</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">p</span>）</div><div class="line">   4.相邻选择器（<span class="selector-tag">h1</span> + <span class="selector-tag">p</span>）</div><div class="line">   5.子选择器（<span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span>）</div><div class="line">   6.后代选择器（<span class="selector-tag">li</span> <span class="selector-tag">a</span>）</div><div class="line">   7.通配符选择器（ * ）</div><div class="line">   8.属性选择器（<span class="selector-tag">a</span><span class="selector-attr">[rel = "external"]</span>）</div><div class="line">   9.伪类选择器（<span class="selector-tag">a</span>:hover, <span class="selector-tag">li</span>:nth-child）</div><div class="line"></div><div class="line"> -   可继承的样式： <span class="attribute">font-size</span> <span class="attribute">font-family</span> <span class="attribute">color</span>, <span class="selector-tag">UL</span> <span class="selector-tag">LI</span> <span class="selector-tag">DL</span> <span class="selector-tag">DD</span> <span class="selector-tag">DT</span>;</div><div class="line"></div><div class="line"> -   不可继承的样式：<span class="attribute">border</span> <span class="attribute">padding</span> <span class="attribute">margin</span> <span class="attribute">width</span> <span class="attribute">height</span> ;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>CSS优先级算法如何计算？</li>
<li>优先级就近原则，同权重情况下样式定义最近者为准;</li>
</ul>
</li>
<li><p>载入样式以最后载入的定位为准;</p>
<p>优先级为:<br>同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。<br>!important &gt;  id &gt; class &gt; tag<br>important 比 内联优先级高</p>
<ul>
<li>CSS3新增伪类有那些？<br>举例：<br>p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素。<br>p:last-of-type  选择属于其父元素的最后 </p><p> 元素的每个 </p><p> 元素。<br>p:only-of-type    选择属于其父元素唯一的 </p><p> 元素的每个 </p><p> 元素。<br>p:only-child        选择属于其父元素的唯一子元素的每个 </p><p> 元素。<br>p:nth-child(2)  选择属于其父元素的第二个子元素的每个 </p><p> 元素。</p></li>
</ul>
<p>:after          在元素之前添加内容,也可以用来做清除浮动。<br>:before         在元素之后添加内容<br>:enabled<br>:disabled       控制表单控件的禁用状态。<br>:checked        单选框或复选框被选中。</p>
<ul>
<li>如何居中div？<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">水平居中：给<span class="selector-tag">div</span>设置一个宽度，然后添加<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">auto</span>属性</div><div class="line"></div><div class="line"> <span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">  &#125;</div><div class="line">让绝对定位的<span class="selector-tag">div</span>居中</div><div class="line"></div><div class="line"> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">    <span class="attribute">margin</span>: auto;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">background-color</span>: pink; <span class="comment">/* 方便看效果 */</span></div><div class="line"> &#125;</div><div class="line">水平垂直居中一</div><div class="line"></div><div class="line"> 确定容器的宽高 宽500 高 300 的层</div><div class="line"> 设置层的外边距</div><div class="line"></div><div class="line"> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;     <span class="comment">/* 相对定位或绝对定位均可 */</span></div><div class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;      <span class="comment">/* 外边距为自身宽高的一半 */</span></div><div class="line">    <span class="attribute">background-color</span>: pink;     <span class="comment">/* 方便看效果 */</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line">水平垂直居中二</div><div class="line"></div><div class="line"> 未知容器的宽高，利用 `<span class="selector-tag">transform</span>` 属性</div><div class="line"></div><div class="line"> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;     <span class="comment">/* 相对定位或绝对定位均可 */</span></div><div class="line">    <span class="attribute">width</span>:<span class="number">500px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">    <span class="attribute">background-color</span>: pink;     <span class="comment">/* 方便看效果 */</span></div><div class="line"></div><div class="line"> &#125;</div><div class="line">水平垂直居中三</div><div class="line"></div><div class="line"> 利用 <span class="selector-tag">flex</span> 布局</div><div class="line"> 实际使用时应考虑兼容性</div><div class="line"></div><div class="line"> <span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;        <span class="comment">/* 垂直居中 */</span></div><div class="line">    <span class="attribute">justify-content</span>: center;    <span class="comment">/* 水平居中 */</span></div><div class="line"></div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background-color</span>: pink;     <span class="comment">/* 方便看效果 */</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>display有哪些值？说明他们的作用。</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">block </span>       块类型。默认宽度为父元素宽度，可设置宽高，换行显示。</div><div class="line"><span class="string">none </span>           缺省值。象行内元素类型一样显示。</div><div class="line"><span class="string">inline </span>         行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。</div><div class="line"><span class="string">inline-block </span> 默认宽度为内容宽度，可以设置宽高，同行显示。</div><div class="line"><span class="built_in">list-item</span>       象块类型元素一样显示，并添加样式列表标记。</div><div class="line"><span class="string">table </span>          此元素会作为块级表格来显示。</div><div class="line"><span class="string">inherit </span>        规定应该从父元素继承 <span class="string">display </span>属性的值。</div></pre></td></tr></table></figure>
</li>
<li><p>position的值relative和absolute定位原点是？<br>absolute<br>  生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。<br>  fixed （老IE不支持）<br>  生成绝对定位的元素，相对于浏览器窗口进行定位。<br>  relative<br>  生成相对定位的元素，相对于其正常位置进行定位。<br>  static<br>  默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。<br>  inherit<br>  规定从父元素继承 position 属性的值。</p>
</li>
<li><p>CSS3有哪些新特性？</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">新增各种CSS选择器 （: <span class="keyword">not</span>(.input)：所有 <span class="class"><span class="keyword">class</span> 不是“<span class="title">input</span>”的节点）</span></div><div class="line">   圆角          （border-radius:<span class="number">8px</span>）</div><div class="line">   多列布局        （multi-column layout）</div><div class="line">   阴影和反射   （Shadow<span class="string">\Reflect）</span></div><div class="line">   文字特效        （text-shadow、）</div><div class="line">   文字渲染        （Text-decoration）</div><div class="line">   线性渐变        （gradient）</div><div class="line">   旋转          （transform）</div><div class="line">   缩放,定位,倾斜,动画,多背景</div><div class="line">   例如:transform:<span class="string">\scale(0.85,0.90)\</span> translate(<span class="number">0px</span>,-<span class="number">30px</span>)<span class="string">\</span> skew(-<span class="number">9deg</span>,<span class="number">0deg</span>)<span class="string">\Animation:</span></div></pre></td></tr></table></figure>
</li>
<li><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？<br>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。<br> 较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。<br> 采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。<br> 它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br> 常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。<br> 在布局上有了比以前更加灵活的空间。</p>
</li>
<li>用纯CSS创建一个三角形的原理是什么？<br>把上、左、右三条边隐藏掉（颜色设为 transparent）<br>#demo {<br>  width: 0;<br>  height: 0;<br>  border-width: 20px;<br>  border-style: solid;<br>  border-color: transparent transparent red transparent;<br>}<ul>
<li>一个满屏 品 字布局 如何设计?<br>简单的方式：<br>上面的div宽100%，<br>下面的两个div分别宽50%，<br>然后用float或者inline使其不换行即可</li>
</ul>
</li>
<li>css多列等高如何实现？<br>利用padding-bottom|margin-bottom正负值相抵；<br>设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，<br>当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，<br>其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。</li>
<li><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.</div><div class="line"></div><div class="line"> * 浏览器默认的<span class="attribute">margin</span>和<span class="attribute">padding</span>不同。解决方案是加一个全局的*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;来统一。</div><div class="line"></div><div class="line"> * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。</div><div class="line"></div><div class="line">   浮动ie产生的双倍距离 <span class="number">#b</span>ox&#123; float:left; <span class="attribute">width</span>:<span class="number">10px</span>; <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;&#125;</div><div class="line"></div><div class="line">   这种情况之下IE会产生20px的距离，解决方案是在<span class="attribute">float</span>的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)</div><div class="line"></div><div class="line">   渐进识别的方式，从总体中逐渐排除局部。</div><div class="line"></div><div class="line">   首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。</div><div class="line">   接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</div><div class="line"></div><div class="line">   css</div><div class="line">       <span class="selector-class">.bb</span>&#123;</div><div class="line">           <span class="attribute">background-color</span>:red;<span class="comment">/*所有识别*/</span></div><div class="line">         <span class="attribute">background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; <span class="comment">/*IE6、7、8识别*/</span></div><div class="line">         +<span class="attribute">background-color</span>:<span class="number">#a200ff</span>;<span class="comment">/*IE6、7识别*/</span></div><div class="line">         _background-<span class="attribute">color</span>:<span class="number">#1e0bd1</span>;<span class="comment">/*IE6识别*/</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line"> *  IE下,可以使用获取常规属性的方法来获取自定义属性,</div><div class="line">    也可以使用getAttribute()获取自定义属性;</div><div class="line">    Firefox下,只能使用getAttribute()获取自定义属性。</div><div class="line">    解决方法:统一通过getAttribute()获取自定义属性。</div><div class="line"></div><div class="line"> *  IE下,even对象有x,y属性,但是没有pageX,pageY属性;</div><div class="line">    Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。</div><div class="line"></div><div class="line"> *  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。</div><div class="line"></div><div class="line"> *  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,</div><div class="line">    可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</div><div class="line"></div><div class="line"> 超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:</div><div class="line"> L-V-H-A :  a:link &#123;&#125; a:visited &#123;&#125; a:hover &#123;&#125; a:active &#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>li 与li 之间有空格怎么办？<br>行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</p>
</li>
<li><p>为什么要初始化CSS样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对<span class="selector-tag">CSS</span>初始化往往会出现浏览器之间的页面显示差异。</div><div class="line"></div><div class="line"> <span class="selector-tag">-</span> 当然，初始化样式会对<span class="selector-tag">SEO</span>有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。</div><div class="line"></div><div class="line"> 最简单的初始化方法： * &#123;<span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>;&#125; （强烈不建议）</div><div class="line"></div><div class="line"> 淘宝的样式初始化代码：</div><div class="line"> <span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</div><div class="line"> <span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125;</div><div class="line"> <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</div><div class="line"> <span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125;</div><div class="line"> <span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125;</div><div class="line"> <span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125;</div><div class="line"> <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125;</div><div class="line"> <span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125;</div><div class="line"> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</div><div class="line"> <span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125;</div><div class="line"> <span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125;</div><div class="line"> <span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125;</div><div class="line"> <span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125;</div><div class="line"> <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</div><div class="line"> <span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>absolute的containing block(容器块)计算方式跟正常流有什么不同？</p>
<p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：<br>1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；<br>2、否则,则由这个祖先元素的 padding box 构成。<br>如果都找不到，则为 initial containing block。</p>
<p>*　补充：</p>
<ol>
<li>static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</li>
<li>absolute: 向上找最近的定位为absolute/relative的元素</li>
<li>fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block<br>＊　CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</li>
</ol>
</li>
</ul>
<p>对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同. 如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间. 仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p>
<p>＊　position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</p>
<p>如果元素的display为none,那么元素不被渲染,position,float不起作用,如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用.如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠.</p>
<p>＊　对BFC规范(块级格式化上下文：block formatting context)的理解？</p>
<p>  （W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）<br>   一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。<br>   不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。<br>＊　css定义的权重</p>
<p>  以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*权重为1*/</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*权重为10*/</span></div><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*权重为100*/</span></div><div class="line"><span class="selector-id">#id1</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*权重为100+1=101*/</span></div><div class="line"><span class="selector-id">#id1</span> <span class="selector-tag">div</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*权重为10+1=11*/</span></div><div class="line"><span class="selector-class">.class1</span> <span class="selector-tag">div</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*权重为10+10+1=21*/</span></div><div class="line"><span class="selector-class">.class1</span> <span class="selector-class">.class2</span> <span class="selector-tag">div</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现<br>请解释一下为什么需要清除浮动？清除浮动的方式</p>
<p>＊　清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、父级<span class="keyword">div</span>定义height；</div><div class="line"><span class="number">2</span>、父级<span class="keyword">div</span> 也一起浮动；</div><div class="line"><span class="number">3</span>、常规的使用一个<span class="built_in">class</span>；</div><div class="line">  .clearfix:<span class="keyword">before</span>, .clearfix:<span class="keyword">after</span> &#123;</div><div class="line">      content: <span class="string">" "</span>;</div><div class="line">      display: table;</div><div class="line">  &#125;</div><div class="line">  .clearfix:<span class="keyword">after</span> &#123;</div><div class="line">      clear: both;</div><div class="line">  &#125;</div><div class="line">  .clearfix &#123;</div><div class="line">      *zoom: <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="number">4</span>、SASS编译的时候，浮动元素的父级<span class="keyword">div</span>定义伪类:<span class="keyword">after</span></div><div class="line">  &amp;:<span class="keyword">after</span>,&amp;:<span class="keyword">before</span>&#123;</div><div class="line">      content: <span class="string">" "</span>;</div><div class="line">        visibility: hidden;</div><div class="line">        display: block;</div><div class="line">        height: <span class="number">0</span>;</div><div class="line">        clear: both;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">解析原理：</div><div class="line"><span class="number">1</span>) display:block 使生成的元素以块级元素显示,占满剩余空间;</div><div class="line"><span class="number">2</span>) height:<span class="number">0</span> 避免生成内容破坏原有布局的高度。</div><div class="line"><span class="number">3</span>) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;</div><div class="line"><span class="number">4</span>）通过 content:<span class="string">"."</span>生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:<span class="string">"."</span>,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到<span class="number">7.0</span> content:”<span class="string">" 仍然会产生额外的空隙；</span></div><div class="line">5）zoom：1 触发IE hasLayout。</div><div class="line"></div><div class="line">通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。</div></pre></td></tr></table></figure></p>
<ul>
<li><p>什么是外边距合并？</p>
<p>  外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。<br>  合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。<br>  w3school介绍网址： <a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp" target="_blank" rel="external">http://www.w3school.com.cn/css/css_margin_collapsing.asp</a></p>
</li>
<li><p>zoom:1的清除浮动原理?</p>
<p>清除浮动，触发hasLayout；<br>Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。<br>譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。</p>
<p>来龙去脉大概如下：<br>当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。</p>
<p>Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。</p>
<p>目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？<br>可以通过css3里面的动画属性scale进行缩放。</p>
</li>
<li>移动端的布局用过媒体查询吗？</li>
</ul>
<p>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法</p>
<p>当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。</p>
<p>包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。</p>
<p><style> @media (min-width: 700px) and (orientation: landscape){ .sidebar { display: none; } } </style></p>
<ul>
<li><p>使用 CSS 预处理器吗？喜欢那个？</p>
<p>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)</p>
</li>
<li><p>CSS优化、提高性能的方法有哪些？</p>
<p>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；<br>如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；<br>提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;<br>使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；</p>
</li>
<li><p>浏览器是怎样解析CSS选择器的？</p>
<p>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。<br>只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。</p>
</li>
<li><p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p>
</li>
<li><p>margin和padding分别适合什么场景使用？</p>
<p>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。<br>margin用于布局分开元素使元素与元素互不相干；<br>padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段</p>
</li>
<li><p>抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</p>
</li>
<li><p>元素竖向的百分比设定是相对于容器的高度吗？</p>
</li>
<li><p>全屏滚动的原理是什么？用到了CSS的那些属性？</p>
</li>
<li><p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p>
</li>
<li><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>
</li>
<li><p>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</p>
<p>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）<br>双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，<br>比如:first-line、:first-letter、:before、:after等，<br>而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。</p>
<p>想让插入的内容出现在其它内容前，使用::before，否者，使用::after；<br>在代码顺序上，::after生成的内容也比::before生成的内容靠后。<br>如果按堆栈视角，::after生成的内容会在::before生成的内容之上</p>
</li>
<li><p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>
<p>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {<br>  background-color: rgb(250, 255, 189); /<em> #FAFFBD; </em>/<br>  background-image: none;<br>  color: rgb(0, 0, 0);<br>}</p>
</li>
<li><p>你对line-height是如何理解的？</p>
</li>
<li><p>设置元素浮动后，该元素的display值是多少？</p>
<p>自动变成了 display:block</p>
</li>
<li><p>怎么让Chrome支持小于12px 的文字？</p>
<p>1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。<br>2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。<br>3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑。<br>4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。</p>
</li>
<li><p>让页面里的字体变清晰，变细用CSS怎么做？</p>
<p>-webkit-font-smoothing: antialiased;</p>
</li>
<li><p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>
<p>倾斜的字体样式</p>
</li>
<li><p>position:fixed;在android下无效怎么处理？</p>
<p>fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，<br>原来的网页还好好的在那，fixed的内容也没有变过位置，<br>所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。</p>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"></li>
<li><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>
<p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p>
</li>
<li><p>display:inline-block 什么时候会显示间隙？(携程)</p>
<p>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing</p>
</li>
<li><p>overflow: scroll时不能平滑滚动的问题怎么处理？</p>
</li>
<li><p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</p>
</li>
<li><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>
</li>
<li><p>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</p>
<p>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，<br>所以不如隔离开。</p>
<p>因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，<br>这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。</p>
<p>同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，<br>提高了webserver的http请求的解析速度。</p>
</li>
<li><p>style标签写在body后与body前有什么区别？</p>
</li>
<li><p>什么是CSS 预处理器 / 后处理器？</p>
<ul>
<li><p>预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，<br>还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</p>
</li>
<li><p>后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的<br>是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;br&gt;（1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;（3）区  别： IE的content部分把 border 和 padding计算了进去;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS选择符有哪些？哪些属性可以继承？&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;-  1&lt;span class=&quot;selector-class&quot;&gt;.id&lt;/span&gt;选择器（ # myid）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   2.类选择器（&lt;span class=&quot;selector-class&quot;&gt;.myclassname&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   3.标签选择器（&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   4.相邻选择器（&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; + &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   5.子选择器（&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   6.后代选择器（&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   7.通配符选择器（ * ）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   8.属性选择器（&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-attr&quot;&gt;[rel = &quot;external&quot;]&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   9.伪类选择器（&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;:hover, &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;:nth-child）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; -   可继承的样式： &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;UL&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;LI&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DL&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;DT&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; -   不可继承的样式：&lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt; ;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>好的学习网站</title>
    <link href="http://yoursite.com/2017/05/20/%E5%A5%BD%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/05/20/好的学习网站/</id>
    <published>2017-05-20T11:27:26.000Z</published>
    <updated>2017-05-23T01:31:51.053Z</updated>
    
    <content type="html"><![CDATA[<p>51cto专题汇总：<br><a href="http://www.51cto.com/col/35/all.htm" target="_blank" rel="external">http://www.51cto.com/col/35/all.htm</a></p>
<p>Oracle：<br><a href="http://database.51cto.com/art/200511/12457.htm" target="_blank" rel="external">http://database.51cto.com/art/200511/12457.htm</a></p>
<p>Java<br>Java集合类源码解读<br><a href="http://blog.csdn.net/column/details/lc-java-collection.html" target="_blank" rel="external">http://blog.csdn.net/column/details/lc-java-collection.html</a></p>
<p>JVM分代垃圾回收策略的基础概念:<br><a href="http://developer.51cto.com/art/201201/312639.htm" target="_blank" rel="external">http://developer.51cto.com/art/201201/312639.htm</a><br><a href="http://developer.51cto.com/art/201001/176550.htm" target="_blank" rel="external">http://developer.51cto.com/art/201001/176550.htm</a></p>
<p>MySQL入门到精通相关：<a id="more"></a><br><a href="http://database.51cto.com/art/200811/98728.htm" target="_blank" rel="external">http://database.51cto.com/art/200811/98728.htm</a><br><a href="http://database.51cto.com/art/201007/210727.htm" target="_blank" rel="external">http://database.51cto.com/art/201007/210727.htm</a><br><a href="http://linux.51yip.com/search/mysqldump" target="_blank" rel="external">http://linux.51yip.com/search/mysqldump</a></p>
<p>TCP/IP（传输入控制地议/网际协议）<br><a href="http://network.51cto.com/art/200701/38863.htm" target="_blank" rel="external">http://network.51cto.com/art/200701/38863.htm</a></p>
<p>spring技术专题：<br><a href="http://developer.51cto.com/art/200610/33613.htm" target="_blank" rel="external">http://developer.51cto.com/art/200610/33613.htm</a><br><a href="http://developer.51cto.com/art/201206/342959.htm" target="_blank" rel="external">http://developer.51cto.com/art/201206/342959.htm</a><br>多核平台下的Java优化：<br><a href="http://developer.51cto.com/art/201306/397339.htm" target="_blank" rel="external">http://developer.51cto.com/art/201306/397339.htm</a></p>
<p>Linux:<br><a href="http://vbird.dic.ksu.edu.tw/linux_basic/Mandrake9.0/mandrake9.0.php" target="_blank" rel="external">http://vbird.dic.ksu.edu.tw/linux_basic/Mandrake9.0/mandrake9.0.php</a></p>
<p>图标下载：<br><a href="http://www.easyicon.net/" target="_blank" rel="external">http://www.easyicon.net/</a></p>
<p>html教材：<br><a href="http://www.dreamdu.com/xhtml/attribute_cellpadding_cellspacing/" target="_blank" rel="external">http://www.dreamdu.com/xhtml/attribute_cellpadding_cellspacing/</a></p>
<p>RGB颜色对照：<br><a href="http://www.114la.com/other/rgb.htm" target="_blank" rel="external">http://www.114la.com/other/rgb.htm</a></p>
<p>w3school:<br><a href="http://www.w3school.com.cn/index.html" target="_blank" rel="external">http://www.w3school.com.cn/index.html</a></p>
<p>Extjs:<br><a href="http://dev.sencha.com/extjs/5.1.0/examples/" target="_blank" rel="external">http://dev.sencha.com/extjs/5.1.0/examples/</a><br><a href="http://extjs.org.cn/examples" target="_blank" rel="external">http://extjs.org.cn/examples</a></p>
<p>POI：<br><a href="http://poi.apache.org/download.html#POI-3.10-FINAL" target="_blank" rel="external">http://poi.apache.org/download.html#POI-3.10-FINAL</a><br><a href="http://www.cnblogs.com/xwdreamer/archive/2011/07/20/2296975.html" target="_blank" rel="external">http://www.cnblogs.com/xwdreamer/archive/2011/07/20/2296975.html</a></p>
<p>Fusioncharts<br><a href="http://www.fusioncharts.com/charts/line-area-charts/" target="_blank" rel="external">http://www.fusioncharts.com/charts/line-area-charts/</a></p>
<p>Log4j:<br><a href="http://www.iteye.com/topic/378077" target="_blank" rel="external">http://www.iteye.com/topic/378077</a></p>
<p>存储：<br><a href="https://community.emc.com/thread/176852" target="_blank" rel="external">https://community.emc.com/thread/176852</a><br><a href="https://community.emc.com/community/support/chinese/storagehw" target="_blank" rel="external">https://community.emc.com/community/support/chinese/storagehw</a><br><a href="http://support.huawei.com/ecommunity/bbs/10174443.html" target="_blank" rel="external">http://support.huawei.com/ecommunity/bbs/10174443.html</a><br><a href="http://support.huawei.com/ecommunity/bbs/10170777.html" target="_blank" rel="external">http://support.huawei.com/ecommunity/bbs/10170777.html</a><br><a href="http://support.huawei.com/ecommunity/bbs/list_1069,4287.html?dist=1" target="_blank" rel="external">http://support.huawei.com/ecommunity/bbs/list_1069,4287.html?dist=1</a><br><a href="http://blog.163.com/hlz_2599/blog/static/14237847420141610112127/" target="_blank" rel="external">http://blog.163.com/hlz_2599/blog/static/14237847420141610112127/</a><br>HP的支持中心：<br><a href="http://h20565.www2.hp.com/portal/site/hpsc/template.PAGE/public/kb/search/?javax.portlet.begCacheTok=com.vignette.cachetoken&amp;javax.portlet.endCacheTok=com.vignette.cachetoken&amp;javax.portlet.pbp_89ff4a7dab82d782fcbb0710b053ce01_myAction=withResults&amp;javax.portlet.tpst=89ff4a7dab82d782fcbb0710b053ce01&amp;sp4ts.oid=5386547&amp;ac.admitted=1430724918795.876444892.492883150#searchResultHead" target="_blank" rel="external">http://h20565.www2.hp.com/portal/site/hpsc/template.PAGE/public/kb/search/?javax.portlet.begCacheTok=com.vignette.cachetoken&amp;javax.portlet.endCacheTok=com.vignette.cachetoken&amp;javax.portlet.pbp_89ff4a7dab82d782fcbb0710b053ce01_myAction=withResults&amp;javax.portlet.tpst=89ff4a7dab82d782fcbb0710b053ce01&amp;sp4ts.oid=5386547&amp;ac.admitted=1430724918795.876444892.492883150#searchResultHead</a></p>
<p>SMIS：<br><a href="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0901sunhao/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0901sunhao/</a><br><a href="http://wbemservices.sourceforge.net/" target="_blank" rel="external">http://wbemservices.sourceforge.net/</a><br><a href="http://www.doc88.com/p-776453718587.html" target="_blank" rel="external">http://www.doc88.com/p-776453718587.html</a></p>
<p>博科交换机：<br><a href="http://www.doc88.com/p-338761686467.html" target="_blank" rel="external">http://www.doc88.com/p-338761686467.html</a></p>
<p>UML:<br><a href="http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html" target="_blank" rel="external">http://www.cnblogs.com/wangkangluo1/archive/2013/02/21/2920606.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;51cto专题汇总：&lt;br&gt;&lt;a href=&quot;http://www.51cto.com/col/35/all.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.51cto.com/col/35/all.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Oracle：&lt;br&gt;&lt;a href=&quot;http://database.51cto.com/art/200511/12457.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://database.51cto.com/art/200511/12457.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java&lt;br&gt;Java集合类源码解读&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/lc-java-collection.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/column/details/lc-java-collection.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JVM分代垃圾回收策略的基础概念:&lt;br&gt;&lt;a href=&quot;http://developer.51cto.com/art/201201/312639.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.51cto.com/art/201201/312639.htm&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://developer.51cto.com/art/201001/176550.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.51cto.com/art/201001/176550.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MySQL入门到精通相关：
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈MyEclipse通过JDBC连接MySQL数据库</title>
    <link href="http://yoursite.com/2017/05/19/%E6%B5%85%E8%B0%88MyEclipse%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2017/05/19/浅谈MyEclipse通过JDBC连接MySQL数据库/</id>
    <published>2017-05-19T02:00:18.000Z</published>
    <updated>2017-05-19T02:03:38.967Z</updated>
    
    <content type="html"><![CDATA[<p>1.前提是MyEclipse已经能正常开发Java工程<br>2.安装MySQL<br>个人使用的是版本是 mysql-5.0.22-win32.zip<br>网址：<a href="http://www.mysql.com/downloads/mysql/#downloads" target="_blank" rel="external">http://www.mysql.com/downloads/mysql/#downloads</a><br>3.下载JDBC驱动<br>个人使用的是 mysql-connector-java-5.1.22.zip，所需要的就是解压缩之后其中的 mysql-connector-java-5.1.22-bin.jar<br>网址：<a href="http://www.mysql.com/downloads/connector/j/" target="_blank" rel="external">http://www.mysql.com/downloads/connector/j/</a><br>4.代码测试<br>复制代码 代码如下:<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">package ts.jsj.lyh; </div><div class="line"></div><div class="line">import java.sql.*; </div><div class="line"></div><div class="line">/** *//** </div><div class="line">* 使用JDBC连接数据库MySQL的过程 </div><div class="line">* DataBase：JSJ， table：student； </div><div class="line">* @author DuChangfeng 2008 09 18 </div><div class="line">*/ </div><div class="line">public class JDBCTest &#123; </div><div class="line"></div><div class="line">public static Connection getConnection() throws SQLException, </div><div class="line">java.lang.ClassNotFoundException </div><div class="line">&#123; </div><div class="line">//第一步：加载MySQL的JDBC的驱动 </div><div class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;); </div><div class="line"></div><div class="line">//取得连接的url,能访问MySQL数据库的用户名,密码；jsj：数据库名 </div><div class="line">String url = &quot;jdbc:mysql://localhost:3306/jsj&quot;; </div><div class="line">String username = &quot;root&quot;; </div><div class="line">String password = &quot;111&quot;; </div><div class="line"></div><div class="line">//第二步：创建与MySQL数据库的连接类的实例 </div><div class="line">Connection con = DriverManager.getConnection(url, username, password); </div><div class="line">return con; </div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">public static void main(String args[]) &#123; </div><div class="line">try </div><div class="line">&#123; </div><div class="line">//第三步：获取连接类实例con，用con创建Statement对象类实例 sql_statement </div><div class="line">Connection con = getConnection(); </div><div class="line">Statement sql_statement = con.createStatement(); </div><div class="line"></div><div class="line">/** *//************ 对数据库进行相关操作 ************/ </div><div class="line">//如果同名数据库存在，删除 </div><div class="line">//sql_statement.executeUpdate(&quot;drop table if exists student&quot;); </div><div class="line">//执行了一个sql语句生成了一个名为student的表 </div><div class="line">//sql_statement.executeUpdate(&quot;create table student (id int not null auto_increment, name varchar(20) not null default &apos;name&apos;, math int not null default 60, primary key (id) ); &quot;); </div><div class="line">//向表中插入数据 </div><div class="line">//sql_statement.executeUpdate(&quot;insert student values(1, &apos;liying&apos;, 98)&quot;); </div><div class="line">//sql_statement.executeUpdate(&quot;insert student values(2, &apos;jiangshan&apos;, 88)&quot;); </div><div class="line">//sql_statement.executeUpdate(&quot;insert student values(3, &apos;wangjiawu&apos;, 78)&quot;); </div><div class="line">//sql_statement.executeUpdate(&quot;insert student values(4, &apos;duchangfeng&apos;, 100)&quot;); </div><div class="line">//---以上操作不实用，但是列出来作为参考--- </div><div class="line"></div><div class="line">//第四步：执行查询，用ResultSet类的对象，返回查询的结果 </div><div class="line">String query = &quot;select * from student&quot;; </div><div class="line">ResultSet result = sql_statement.executeQuery(query); </div><div class="line">/** *//************ 对数据库进行相关操作 ************/ </div><div class="line"></div><div class="line">System.out.println(&quot;Student表中的数据如下:&quot;); </div><div class="line">System.out.println(&quot;------------------------&quot;); </div><div class="line">System.out.println(&quot;学号&quot; + &quot; &quot; + &quot;姓名&quot; + &quot; &quot; + &quot;数据成绩 &quot;); </div><div class="line">System.out.println(&quot;------------------------&quot;); </div><div class="line"></div><div class="line">//对获得的查询结果进行处理，对Result类的对象进行操作 </div><div class="line">while (result.next()) </div><div class="line">&#123; </div><div class="line">int number = result.getInt(&quot;sno&quot;); </div><div class="line">String name = result.getString(&quot;sname&quot;); </div><div class="line">String mathScore = result.getString(&quot;sgrade&quot;); </div><div class="line">//取得数据库中的数据 </div><div class="line">System.out.println(&quot; &quot; + number + &quot; &quot; + name + &quot; &quot; + mathScore); </div><div class="line">&#125; </div><div class="line"></div><div class="line">//关闭连接和声明 </div><div class="line">sql_statement.close(); </div><div class="line">con.close(); </div><div class="line"></div><div class="line">&#125; catch(java.lang.ClassNotFoundException e) &#123; </div><div class="line">//加载JDBC错误,所要用的驱动没有找到 </div><div class="line">System.err.print(&quot;ClassNotFoundException&quot;); </div><div class="line">//其他错误 </div><div class="line">System.err.println(e.getMessage()); </div><div class="line">&#125; catch (SQLException ex) &#123; </div><div class="line">//显示数据库连接错误或查询错误 </div><div class="line">System.err.println(&quot;SQLException: &quot; + ex.getMessage()); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="以上大部分内容整理自网络，感谢猿猿们的无私奉献-具体的步骤、强大的互联网上都比较容易查询的到，这里不再赘述，现加上几点个人认为需要注意的地方："><a href="#以上大部分内容整理自网络，感谢猿猿们的无私奉献-具体的步骤、强大的互联网上都比较容易查询的到，这里不再赘述，现加上几点个人认为需要注意的地方：" class="headerlink" title="以上大部分内容整理自网络，感谢猿猿们的无私奉献~~具体的步骤、强大的互联网上都比较容易查询的到，这里不再赘述，现加上几点个人认为需要注意的地方："></a>以上大部分内容整理自网络，感谢猿猿们的无私奉献~~具体的步骤、强大的互联网上都比较容易查询的到，这里不再赘述，现加上几点个人认为需要注意的地方：</h3><ul>
<li>1）关于mysql-connector-java-5.1.22-bin.jar 的存放位置。在MyEclipse具体的java工程中新建一存放jar 包的文件夹（如 lib），将mysql-connector-java-5.1.22-bin.jar 复制到文件夹中，选中jar包右击—&gt;Build Path—&gt;Add To Build Path，即可。 </li>
</ul>
<p>若出现 </p>
<p>ClassNotFoundExceptioncom.mysql.jdbc.Driver </p>
<p>的提示，则正是由于缺少导入jar包所造成的。 </p>
<ul>
<li>2）如果已经对MySQL的使用很熟悉，则可忽略这条。个人在测试连接时，老是出现这样的异常提示： </li>
</ul>
<p>SQLException: Communications link failure<br>The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. </p>
<p>这正是由于个人对MySQL使用不熟悉，对MySQL进行了诸多尝试性的操作，不知何时无意中将MySQL的服务(如果在安装MySQL时没有更改的话，缺省服务名就是MySQL)关闭，解决方法开启此服务即可。控制面板—&gt;管理工具—&gt;服务—&gt;MySQL—&gt;选择启用。 </p>
<ul>
<li>3)在使用上面的代码测试时，需要更改的地方有：<br>//MySQL数据库的用户名,密码,数据库名<br>复制代码 代码如下:</li>
</ul>
<p>String url = “jdbc:mysql://localhost:3306/jsj”;<br>String username = “root”;<br>String password = “111”; </p>
<p>以及具体基本表中的所要查询的字段名：<br>复制代码 代码如下:</p>
<p>int number = result.getInt(“sno”);<br>String name = result.getString(“sname”);<br>String mathScore = result.getString(“sgrade”); </p>
<p>多多分享，有问题欢迎交流~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.前提是MyEclipse已经能正常开发Java工程&lt;br&gt;2.安装MySQL&lt;br&gt;个人使用的是版本是 mysql-5.0.22-win32.zip&lt;br&gt;网址：&lt;a href=&quot;http://www.mysql.com/downloads/mysql/#downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mysql.com/downloads/mysql/#downloads&lt;/a&gt;&lt;br&gt;3.下载JDBC驱动&lt;br&gt;个人使用的是 mysql-connector-java-5.1.22.zip，所需要的就是解压缩之后其中的 mysql-connector-java-5.1.22-bin.jar&lt;br&gt;网址：&lt;a href=&quot;http://www.mysql.com/downloads/connector/j/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.mysql.com/downloads/connector/j/&lt;/a&gt;&lt;br&gt;4.代码测试&lt;br&gt;复制代码 代码如下:
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据库常用命令小结</title>
    <link href="http://yoursite.com/2017/05/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%E3%80%81/"/>
    <id>http://yoursite.com/2017/05/08/数据库常用命令小结、/</id>
    <published>2017-05-08T01:26:15.000Z</published>
    <updated>2017-05-19T02:06:57.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-数据库常用命令"><a href="#MySQL-数据库常用命令" class="headerlink" title="MySQL 数据库常用命令"></a>MySQL 数据库常用命令</h2><h3 id="1、MySQL常用命令"><a href="#1、MySQL常用命令" class="headerlink" title="1、MySQL常用命令"></a>1、MySQL常用命令</h3><ul>
<li>create database name; 创建数据库</li>
<li>use databasename; 选择数据库</li>
<li>drop database name 直接删除数据库，不提醒</li>
<li>show tables; 显示表</li>
<li>describe tablename; 表的详细描述</li>
<li>select 中加上distinct去除重复字段</li>
<li>mysqladmin drop databasename 删除数据库前，有提示。</li>
<li>显示当前mysql版本和当前日期</li>
<li>select version(),current_date;<a id="more"></a>
<h3 id="2、修改mysql中root的密码："><a href="#2、修改mysql中root的密码：" class="headerlink" title="2、修改mysql中root的密码："></a>2、修改mysql中root的密码：</h3>shell&gt;mysql -u root -p<br>mysql&gt; update user set password=password(”xueok654123″) where user=’root’;<br>mysql&gt; flush privileges //刷新数据库<br>mysql&gt;use dbname； 打开数据库：<br>mysql&gt;show databases; 显示所有数据库<br>mysql&gt;show tables; 显示数据库mysql中所有的表：先use mysql；然后<br>mysql&gt;describe user; 显示表mysql数据库中user表的列信息）；</li>
</ul>
<h3 id="3、grant"><a href="#3、grant" class="headerlink" title="3、grant"></a>3、grant</h3><p>创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令something做这个<br>mysql&gt; grant all privileges on <em>.</em> to user@localhost identified by ’something’ with<br>增加新用户<br>格式：grant select on 数据库.<em> to 用户名@登录主机 identified by “密码”<br>GRANT ALL PRIVILEGES ON </em>.<em> TO monty@localhost IDENTIFIED BY ’something’ WITH GRANT OPTION;<br>GRANT ALL PRIVILEGES ON </em>.<em> TO monty@”%” IDENTIFIED BY ’something’ WITH GRANT OPTION;<br>删除授权：<br>mysql&gt; revoke all privileges on </em>.<em> from root@”%”;<br>mysql&gt; delete from user where user=”root” and host=”%”;<br>mysql&gt; flush privileges;<br>创建一个用户custom在特定客户端it363.com登录，可访问特定数据库fangchandb<br>mysql &gt;grant select, insert, update, delete, create,drop on fangchandb.</em> to custom@ it363.com identified by ‘ passwd’<br>重命名表:<br>mysql &gt; alter table t1 rename t2;</p>
<h3 id="4、mysqldump"><a href="#4、mysqldump" class="headerlink" title="4、mysqldump"></a>4、mysqldump</h3><p>备份数据库<br>shell&gt; mysqldump -h host -u root -p dbname &gt;dbname_backup.sql<br>恢复数据库<br>shell&gt; mysqladmin -h myhost -u root -p create dbname<br>shell&gt; mysqldump -h host -u root -p dbname &lt; dbname_backup.sql<br>如果只想卸出建表指令，则命令如下：<br>shell&gt; mysqladmin -u root -p -d databasename &gt; a.sql<br>如果只想卸出插入数据的sql命令，而不需要建表命令，则命令如下：<br>shell&gt; mysqladmin -u root -p -t databasename &gt; a.sql<br>那么如果我只想要数据，而不想要什么sql命令时，应该如何操作呢？<br>　　 mysqldump -T./ phptest driver<br>其中，只有指定了-T参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目录，即与mysqldump同一目录。如果不指定driver 表，则将卸出整个数据库的数据。每个表会生成两个文件，一个为.sql文件，包含建表执行。另一个为.txt文件，只包含数据，且没有sql指令。</p>
<h3 id="5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。"><a href="#5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。" class="headerlink" title="5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。"></a>5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。</h3><p>例如，如果在文件my_file.sql 中存放有查<br>询，可如下执行这些查询：<br>例如，如果您想将建表语句提前写在sql.txt中:<br>mysql &gt; mysql -h myhost -u root -p database &lt; sql.txt</p>
<h3 id="常用mysql命令行命令"><a href="#常用mysql命令行命令" class="headerlink" title="常用mysql命令行命令"></a>常用mysql命令行命令</h3><h4 id="1、mysql的启动与停止"><a href="#1、mysql的启动与停止" class="headerlink" title="1、mysql的启动与停止"></a>1、mysql的启动与停止</h4><p>　　启动MYSQL服务 net start mysql<br>　　停止MYSQL服务 net stop mysql</p>
<h4 id="2、-netstat-–na-findstr-3306-查看被监听的端口-findstr用于查找后面的端口是否存在"><a href="#2、-netstat-–na-findstr-3306-查看被监听的端口-findstr用于查找后面的端口是否存在" class="headerlink" title="2、 netstat –na | findstr 3306 查看被监听的端口 , findstr用于查找后面的端口是否存在"></a>2、 netstat –na | findstr 3306 查看被监听的端口 , findstr用于查找后面的端口是否存在</h4><h4 id="3、-在命令行中登陆MYSQL控制台-即使用-MYSQL-COMMEND-LINE-TOOL"><a href="#3、-在命令行中登陆MYSQL控制台-即使用-MYSQL-COMMEND-LINE-TOOL" class="headerlink" title="3、 在命令行中登陆MYSQL控制台 , 即使用 MYSQL COMMEND LINE TOOL"></a>3、 在命令行中登陆MYSQL控制台 , 即使用 MYSQL COMMEND LINE TOOL</h4><p>　　 语法格式 mysql –user=root –password=123456 db_name<br>　　 或 mysql –u root –p123456 db_name</p>
<h4 id="4、-进入MYSQL命令行工具后-使用status-或-s-查看运行环境信息"><a href="#4、-进入MYSQL命令行工具后-使用status-或-s-查看运行环境信息" class="headerlink" title="4、 进入MYSQL命令行工具后 , 使用status; 或/s 查看运行环境信息"></a>4、 进入MYSQL命令行工具后 , 使用status; 或/s 查看运行环境信息</h4><h4 id="5、-切换连接数据库的语法-use-new-dbname"><a href="#5、-切换连接数据库的语法-use-new-dbname" class="headerlink" title="5、 切换连接数据库的语法 : use new_dbname;"></a>5、 切换连接数据库的语法 : use new_dbname;</h4><p>　　 　 </p>
<h4 id="6、-显示所有数据库-show-databases"><a href="#6、-显示所有数据库-show-databases" class="headerlink" title="6、 显示所有数据库 : show databases;"></a>6、 显示所有数据库 : show databases;</h4><p>　　 </p>
<h4 id="7、-显示数据库中的所有表-show-tables"><a href="#7、-显示数据库中的所有表-show-tables" class="headerlink" title="7、 显示数据库中的所有表 : show tables;"></a>7、 显示数据库中的所有表 : show tables;</h4><p>　　 </p>
<h4 id="8、-显示某个表创建时的全部信息-show-create-table-table-name"><a href="#8、-显示某个表创建时的全部信息-show-create-table-table-name" class="headerlink" title="8、 显示某个表创建时的全部信息 : show create table table_name;"></a>8、 显示某个表创建时的全部信息 : show create table table_name;</h4><p>　　 </p>
<h4 id="9、-查看表的具体属性信息及表中各字段的描述"><a href="#9、-查看表的具体属性信息及表中各字段的描述" class="headerlink" title="9、 查看表的具体属性信息及表中各字段的描述"></a>9、 查看表的具体属性信息及表中各字段的描述</h4><p>　　 Describe table_name; 缩写形式 : desc table_name;</p>
<h2 id="MySql中的SQL语句"><a href="#MySql中的SQL语句" class="headerlink" title="MySql中的SQL语句"></a>MySql中的SQL语句</h2><h3 id="1-数据库创建-Create-database-db-name"><a href="#1-数据库创建-Create-database-db-name" class="headerlink" title="1 . 数据库创建 : Create database db_name;"></a>1 . 数据库创建 : Create database db_name;</h3><p>　　数据库删除 : Drop database db_name; 删除时可先判断是否存在，写成 : drop database if exits db_name 
　　 </p>
<h3 id="2-建表-创建数据表的语法-create-table-table-name-字段1-数据类型-字段2-数据类型"><a href="#2-建表-创建数据表的语法-create-table-table-name-字段1-数据类型-字段2-数据类型" class="headerlink" title="2 . 建表 : 创建数据表的语法 : create table table_name (字段1 数据类型 , 字段2 数据类型);"></a>2 . 建表 : 创建数据表的语法 : create table table_name (字段1 数据类型 , 字段2 数据类型);</h3><p>　　 例 : create table mytable (id int , username char(20));<br>　　 删表 : drop table table_name; 例 : drop table mytable; 
　　 </p>
<h3 id="3-添加数据-Insert-into-表名-字段1-字段2-…-values-值1-值2-…"><a href="#3-添加数据-Insert-into-表名-字段1-字段2-…-values-值1-值2-…" class="headerlink" title="3 . 添加数据 : Insert into 表名 [(字段1 , 字段2 , ….)] values (值1 , 值2 , …..);"></a>3 . 添加数据 : Insert into 表名 [(字段1 , 字段2 , ….)] values (值1 , 值2 , …..);</h3><p>　　如果向表中的每个字段都插入一个值,那么前面 [ ] 括号内字段名可写也可不写<br>　　 例 : insert into mytable (id,username) values (1,’zhangsan’); 
　　 </p>
<h3 id="4-查询-查询所有数据-select-from-table-name"><a href="#4-查询-查询所有数据-select-from-table-name" class="headerlink" title="4. 查询 : 查询所有数据 : select * from table_name;"></a>4. 查询 : 查询所有数据 : select * from table_name;</h3><p>　　查询指定字段的数据 : select 字段1 , 字段2 from table_name;<br>　　例 : select id,username from mytable where id=1 order by desc;多表查询语句————参照第17条实例<br>　　 ### 　5 . 更新指定数据 , 更新某一个字段的数据（注意，不是更新字段的名字）<br>　　Update table_name set 字段名=’新值’ [, 字段2 =’新值’ , …..][where id=id_num] [order by 字段 顺序]<br>　　例 : update mytable set username=’lisi’ where id=1;<br>　　Order语句是查询的顺序 , 如 : order by id desc(或asc) , 顺序有两种 : desc倒序(100—1,即从最新数据往后查询),asc(从1-100)，Where和order语句也可用于查询select 与删除delete 
　　 </p>
<h3 id="6-删除表中的信息"><a href="#6-删除表中的信息" class="headerlink" title="6 . 删除表中的信息 :"></a>6 . 删除表中的信息 :</h3><p>　　 删除整个表中的信息 : delete from table_name;<br>　　 删除表中指定条件的语句 : delete from table_name where 条件语句 ; 条件语句如 : id=3; 
　　 </p>
<h3 id="7-创建数据库用户"><a href="#7-创建数据库用户" class="headerlink" title="7 . 创建数据库用户"></a>7 . 创建数据库用户</h3><p>　　一次可以创建多个数据库用户如：<br>　　CREATE USER username1 identified BY ‘password’ , username2 IDENTIFIED BY ‘password’…. 
　　 </p>
<h3 id="8-用户的权限控制：grant"><a href="#8-用户的权限控制：grant" class="headerlink" title="8 . 用户的权限控制：grant"></a>8 . 用户的权限控制：grant</h3><p>　　 库，表级的权限控制 : 将某个库中的某个表的控制权赋予某个用户<br>　　 Grant all ON db_name.table_name TO user_name [ indentified by ‘password’ ]; 
　　 </p>
<h3 id="9-表结构的修改"><a href="#9-表结构的修改" class="headerlink" title="9 . 表结构的修改"></a>9 . 表结构的修改</h3><p>　　（1）增加一个字段格式：<br>　　alter table table_name add column (字段名 字段类型); —-此方法带括号<br>　　（2）指定字段插入的位置：<br>　　alter table table_name add column 字段名 字段类型 after 某字段；<br>　　删除一个字段：<br>　　alter table table_name drop字段名;<br>　　（3）修改字段名称/类型<br>　　alter table table_name change 旧字段名 新字段名 新字段的类型;<br>　　（4）改表的名字<br>　　alter table table_name rename to new_table_name;<br>　　（5）一次性清空表中的所有数据<br>　　truncate table table_name; 此方法也会使表中的取号器(ID)从1开始 
　　 </p>
<h3 id="10-增加主键，外键，约束，索引。。。。-使用方法见17实例"><a href="#10-增加主键，外键，约束，索引。。。。-使用方法见17实例" class="headerlink" title="10 . 增加主键，外键，约束，索引。。。。(使用方法见17实例)"></a>10 . 增加主键，外键，约束，索引。。。。(使用方法见17实例)</h3><p>　　① 约束（主键Primary key、唯一性Unique、非空Not Null）<br>　　② 自动增张 auto_increment<br>　　③外键Foreign key—–与reference table_name(col_name列名)配合使用，建表时单独使用<br>　　④ 删除多个表中有关联的数据—-设置foreign key 为set null —具体设置参考帮助文档 
　　 </p>
<h3 id="11-查看数据库当前引擎"><a href="#11-查看数据库当前引擎" class="headerlink" title="11 . 查看数据库当前引擎"></a>11 . 查看数据库当前引擎</h3><p>　　 SHOW CREATE TABLE table_name;<br>　　 修改数据库引擎<br>　　 ALTER TABLE table_name ENGINE=MyISAM | InnoDB; 
　　 </p>
<h3 id="12-SQL语句运用实例"><a href="#12-SQL语句运用实例" class="headerlink" title="12 . SQL语句运用实例:"></a>12 . SQL语句运用实例:</h3><p>　　<strong> –1 建users表<br>　　create table users (id int primary key auto_increment,nikename varchar(20) not null unique,password varchar(100) not null,address varchar(200), reg_date timestamp not null default CURRENT_TIMESTAMP);<br>　　<br>　　–2 建articles表,在建表时设置外键<br>　　create table articles (id int primary key auto_increment,content longtext not null,userid int,constraint foreign key (userid) references users(id) on delete set null);<br>　　<br>　　———————————————————————–<br>　　–2.1 建articles表,建表时不设置外键<br>　　 create table articles (id int primary key auto_increment,content longtext not null,userid int);<br>　　–2.2 给articles表设置外键<br>　　 alter table articles add constraint foreign key (userid) references users(id) on delete set null;<br>　　————————————————————————<br>　　<br>　　–3. 向users表中插入数据,同时插入多条<br>　　insert into users (id,nikename,password,address) values (1,’lyh1’,’1234’,null),(10,’lyh22’,’4321’,’湖北武汉’),(null,’lyh333’,’5678’, ‘北京海淀’);<br>　　<br>　　–4. 向article中插入三条数据<br>　　insert into articles (id,content,userid) values (2,’hahahahahaha’,11),(null,’xixixixixix’,10),(13,’aiaiaiaiaiaiaiaiaiaiaiaia’,1),(14,’hohoahaoaoooooooooo’,10);<br>　　<br>　　–5. 进行多表查询，选择users表中ID=10的用户发布的所有留言及该用户的所有信息<br>　　select articles.id,articles.content,users.<em> from users,articles where users.id=10 and articles.userid=users.id order by articles.id desc;<br>　　<br>　　–6. 查看数据库引擎类型<br>　　show create table users;<br>　　<br>　　–7. 修改数据库引擎类型<br>　　alter table users engine=MyISAM; —因为users表中ID被设置成外键，执行此句会出错<br>　　<br>　　–8. 同表查询,已知一个条件的情况下.查询ID号大于用户lyh1的ID号的所有用户<br>　　select a.id,a.nikename,a.address from users a,users b where b.nikename=’lyh1’ and a.id&gt;b.id;<br>　　——也可写成<br>　　select id,nikename,address from users where id&gt;(select id from users where nikename=’lyh1’);<br>　　<br>　　–9. 显示年龄比领导还大的员工：<br>　　select a.name from users a,users b where a.managerid=b.id and a.age&gt;b.age;<br>　　<br>　　查询编号为2的发帖人: 先查articles表,得到发帖人的编号,再根据编号查users得到的用户名。<br>　　接着用关联查询.<br>　　select </em> from articles,users得到笛卡儿积,再加order by articles.id以便观察<br>　　<br>　　使用select <em> from articles,users where articles.id=2 筛选出2号帖子与每个用户的组合记录<br>　　<br>　　再使用select </em> from articles,users where articles.id=2 and articles.userid=users.id选出users.id等于2号帖的发帖人id的记录.<br>　　<br>　　只取用户名:select user where user.id=(select userid from articles where article.id =2)<br>　　<br>　　找出年龄比小王还大的人:假设小王是28岁,先想找出年龄大于28的人<br>　　select <em> from users where age&gt;(select age from users where name=’xiaowang’);<br>　　**</em></strong>要查询的记录需要参照表里面的其他记录:<br>　　select a.name from users a,users b where b.name=’xiaowang’ and a.age&gt;b.age<br>　　<br>　　表里的每个用户都想pk一下.select a.nickname,b.nickname from users a,users b where a.id&gt;b.id ;<br>　　<br>　　更保险的语句:select a.nickname,b.nickname from (select <em> from users order by id) a,(se<br>　　lect </em> from users order by id) b where a.id&gt;b.id ;<br>　　<br>　　再查询某个人发的所有帖子.<br>　　select b.* from articles a , articles b where a.id=2 and a.userid=b.userid<br>　　<br>　　说明: 表之间存在着关系，ER概念的解释，用access中的示例数据库演示表之间的关系.只有innodb引擎才支持foreign key，mysql的任何引擎目前都不支持check约束。 </p>
<h3 id="字符集出现错误解决办法"><a href="#字符集出现错误解决办法" class="headerlink" title="字符集出现错误解决办法"></a>字符集出现错误解决办法</h3><h4 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h4><p>　　mysql&gt; update users<br>　　-&gt; set username=’关羽’<br>　　-&gt; where userid=2;<br>　　ERROR 1366 (HY000): Incorrect string value: ‘/xB9/xD8/xD3/xF0’ for column ‘usern<br>　　ame’ at row 1<br>　　向表中插入中文字符时，出现错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">　　mysql&gt; select * from users; </div><div class="line">　　+--------+----------+ </div><div class="line">　　| userid | username | </div><div class="line">　　+--------+----------+ </div><div class="line">　　| 2 | ???? | </div><div class="line">　　| 3 | ???? | </div><div class="line">　　| 4 | ?í?ù | </div><div class="line">　　+--------+----------+</div></pre></td></tr></table></figure></p>
<p>　　3 rows in set (0.00 sec)<br>　　表中的中文字符位乱码。<br>　　解决办法：<br>　　使用命令：<br>　　mysql&gt; status;<br>　　————–<br>　　mysql Ver 14.12 Distrib 5.0.45, for Win32 (ia32)<br>　　<br>　　Connection id: 8<br>　　Current database: test<br>　　Current user: root@localhost<br>　　SSL: Not in use<br>　　Using delimiter: ;<br>　　Server version: 5.0.45-community-nt MySQL Community Edition (GPL)<br>　　Protocol version: 10<br>　　Connection: localhost via TCP/IP<br>　　Server characterset: latin1<br>　　Db characterset: latin1<br>　　Client characterset: gbk<br>　　Conn. characterset: gbk<br>　　TCP port: 3306<br>　　Uptime: 7 hours 39 min 19 sec<br>　　Threads: 2 Questions: 174 Slow queries: 0 Opens: 57 Flush tables: 1 Open ta<br>　　bles: 1 Queries per second avg: 0.006<br>　　————–<br>　　查看mysql发现Server characterset，Db characterset的字符集设成了latin1，所以出现中文乱码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　mysql&gt; show tables; </div><div class="line">　　+----------------+ </div><div class="line">　　| Tables_in_test | </div><div class="line">　　+----------------+ </div><div class="line">　　| users | </div><div class="line">　　+----------------+ </div><div class="line">　　1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>　　更改表的字符集。<br>　　mysql&gt; alter table users character set GBK;<br>　　Query OK, 3 rows affected (0.08 sec)<br>　　Records: 3 Duplicates: 0 Warnings: 0<br>　　<br>　　查看表的结构：<br>　　mysql&gt; show create users;<br>　　ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that<br>　　corresponds to your MySQL server version for the right syntax to use near ‘users<br>　　‘ at line 1<br>　　mysql&gt; show create table users;<br>　　+——-+———————————————————————–<br>　　——————————————————————————+<br>　　| Table | Create Table<br>　　|<br>　　+——-+———————————————————————–<br>　　——————————————————————————+<br>　　| users | CREATE TABLE <code>users</code> (<br>　　<code>userid</code> int(11) default NULL,<br>　　<code>username</code> char(20) character set latin1 default NULL<br>　　) ENGINE=InnoDB DEFAULT CHARSET=gbk |<br>　　+——-+———————————————————————–<br>　　——————————————————————————+<br>　　1 row in set (0.00 sec)<br>　　<br>　　mysql&gt; desc users;<br>　　+———-+———-+——+—–+———+——-+<br>　　| Field | Type | Null | Key | Default | Extra |<br>　　+———-+———-+——+—–+———+——-+<br>　　| userid | int(11) | YES | | NULL | |<br>　　| username | char(20) | YES | | NULL | |<br>　　+———-+———-+——+—–+———+——-+<br>　　2 rows in set (0.02 sec)<br>　　<br>　　这时向表中插入中文然后有错误。<br>　　mysql&gt; insert into users values(88,’中文’);<br>　　ERROR 1366 (HY000): Incorrect string value: ‘/xD6/xD0/xCE/xC4’ for column ‘usern<br>　　ame’ at row 1<br>　　mysql&gt; insert into users values(88,’中文’);<br>　　ERROR 1366 (HY000): Incorrect string value: ‘/xD6/xD0/xCE/xC4’ for column ‘usern<br>　　ame’ at row 1<br>　　<br>　　还要更改users表的username的字符集。<br>　　mysql&gt; alter table users modify username char(20) character set gbk;<br>　　ERROR 1366 (HY000): Incorrect string value: ‘/xC0/xEE/xCB/xC4’ for column ‘usern<br>　　ame’ at row 1<br>　　mysql&gt; alter table users modify username char(20) character set gbk;<br>　　ERROR 1366 (HY000): Incorrect string value: ‘/xC0/xEE/xCB/xC4’ for column ‘usern<br>　　ame’ at row 1<br>　　<br>　　因为表中已经有数据，所以更改username字符集的操作没有成<strong><em><br>　　清空users表中的数据<br>　　mysql&gt; truncate table users;<br>　　Query OK, 3 rows affected (0.01 sec)<br>　　<br>　　从新更改user表中username的字符集<br>　　mysql&gt; alter table users modify username char(20) character set gbk;<br>　　Query OK, 0 rows affected (0.06 sec)<br>　　Records: 0 Duplicates: 0 Warnings: 0<br>　　<br>　　这时再插入中文字符，插入成</em></strong>。<br>　　mysql&gt; insert into users values(88,’中文’);<br>　　Query OK, 1 row affected (0.01 sec)<br>　　<br>　　mysql&gt; select * from users;<br>　　+——–+———-+<br>　　| userid | username |<br>　　+——–+———-+<br>　　| 88 | 中文 |<br>　　+——–+———-+<br>　　1 row in set (0.00 sec)<br>　　mysql&gt;</p>
<h1 id="转载声明：本文转自http-hi-baidu-com-zhjlabm-blog-item-b939fc3307a1d445ad4b5fbd-html"><a href="#转载声明：本文转自http-hi-baidu-com-zhjlabm-blog-item-b939fc3307a1d445ad4b5fbd-html" class="headerlink" title="转载声明：本文转自http://hi.baidu.com/zhjlabm/blog/item/b939fc3307a1d445ad4b5fbd.html"></a>转载声明：本文转自<a href="http://hi.baidu.com/zhjlabm/blog/item/b939fc3307a1d445ad4b5fbd.html" target="_blank" rel="external">http://hi.baidu.com/zhjlabm/blog/item/b939fc3307a1d445ad4b5fbd.html</a></h1><h3 id="学习MySQL常用操作命令"><a href="#学习MySQL常用操作命令" class="headerlink" title="学习MySQL常用操作命令"></a>学习MySQL常用操作命令</h3><h4 id="1、启动MySQL服务器"><a href="#1、启动MySQL服务器" class="headerlink" title="1、启动MySQL服务器"></a>1、启动MySQL服务器</h4><p>实际上上篇已讲到如何启动MySQL。两种方法： 一是用winmysqladmin，如果机器启动时已自动运行，则可直接进入下一步操作。 二是在DOS方式下运行 d:mysqlbinmysqld</p>
<h4 id="2、进入mysql交互操作界面"><a href="#2、进入mysql交互操作界面" class="headerlink" title="2、进入mysql交互操作界面"></a>2、进入mysql交互操作界面</h4><p>在DOS方式下，运行： d:mysqlbinmysql<br>出现: mysql 的提示符，此时已进入mysql的交互操作方式。<br>如果出现 “ERROR 2003: Can′t connect to MySQL server on ′localhost′ (10061)“，<br>说明你的MySQL还没有启动。</p>
<h4 id="3、退出MySQL操作界面"><a href="#3、退出MySQL操作界面" class="headerlink" title="3、退出MySQL操作界面"></a>3、退出MySQL操作界面</h4><p>在mysql&gt;提示符下输入quit可以随时退出交互操作界面：<br>mysql&gt; quit<br>Bye<br>你也可以用control-D退出。</p>
<h4 id="4、第一条命令"><a href="#4、第一条命令" class="headerlink" title="4、第一条命令"></a>4、第一条命令</h4><p>mysql&gt; select version(),current_date();<br>+—————-+—————–+<br>| version() | current_date() |<br>+—————-+—————–+<br>| 3.23.25a-debug | 2001-05-17 |<br>+—————-+—————–+<br>1 row in set (0.01 sec)<br>mysql&gt;</p>
<p>此命令要求mysql服务器告诉你它的版本号和当前日期。尝试用不同大小写操作上述命令，看结果如何。结果说明mysql命令的大小写结果是一致的。<br>练习如下操作：<br>mysql&gt;Select (20+5)<em>4;<br>mysql&gt;Select (20+5)</em>4,sin(pi()/3);<br>mysql&gt;Select (20+5)*4 AS Result,sin(pi()/3); (AS: 指定假名为Result) </p>
<h4 id="5、多行语句"><a href="#5、多行语句" class="headerlink" title="5、多行语句"></a>5、多行语句</h4><pre><code>一条命令可以分成多行输入，直到出现分号“；”为止： 
</code></pre><p><ccid_nobr></ccid_nobr></p>
<p><table width="400" border="1" cellspacing="0" cellpadding="2" bordercolorlight="black" bordercolordark="#FFFFFF" align="center"></table></p>
<p><tr></tr></p>
<p><td bgcolor="e6e6e6" class="code" style="font-size:9pt"></td></p>
<p><pre><ccid_code> mysql&gt; select<br>-&gt; USER()<br>-&gt; ,<br>-&gt; now()<br>-&gt;;<br>+——————–+———————+<br>| USER() | now() |<br>+——————–+———————+<br>| ODBC@localhost | 2001-05-17 22:59:15 |<br>+——————–+———————+<br>1 row in set (0.06 sec)<br>mysql&gt;</ccid_code></pre></p>
<p>注意中间的逗号和最后的分号的使用方法。</p>
<h4 id="6、一行多命令"><a href="#6、一行多命令" class="headerlink" title="6、一行多命令"></a>6、一行多命令</h4><p>输入如下命令：<br>mysql&gt; SELECT USER(); SELECT NOW();<br>+——————+<br>| USER() |<br>+——————+<br>| ODBC@localhost |<br>+——————+<br>1 row in set (0.00 sec)<br>+———————+<br>| NOW() |<br>+———————+<br>| 2001-05-17 23:06:15 |<br>+———————+<br>1 row in set (0.00 sec)<br>mysql&gt;</p>
<p>注意中间的分号，命令之间用分号隔开。</p>
<h4 id="7、显示当前存在的数据库"><a href="#7、显示当前存在的数据库" class="headerlink" title="7、显示当前存在的数据库"></a>7、显示当前存在的数据库</h4><p>mysql&gt; show databases;<br>+———-+<br>| Database |<br>+———-+<br>| mysql |<br>| test |<br>+———-+<br>2 row in set (0.06 sec)<br>mysql&gt;</p>
<h4 id="8、选择数据库并显示当前选择的数据库"><a href="#8、选择数据库并显示当前选择的数据库" class="headerlink" title="8、选择数据库并显示当前选择的数据库"></a>8、选择数据库并显示当前选择的数据库</h4><p>mysql&gt; USE mysql<br>Database changed<br>mysql&gt;<br>(USE 和 QUIT 命令不需要分号结束。）<br>mysql&gt; select database();<br>+—————+<br>| database() |<br>+—————+<br>| mysql |<br>+—————+<br>1 row in set (0.00 sec)</p>
<h4 id="9、显示当前数据库中存在的表"><a href="#9、显示当前数据库中存在的表" class="headerlink" title="9、显示当前数据库中存在的表"></a>9、显示当前数据库中存在的表</h4><p>mysql&gt; SHOW TABLES;</p>
<h4 id="10、显示表-db-的内容"><a href="#10、显示表-db-的内容" class="headerlink" title="10、显示表(db)的内容"></a>10、显示表(db)的内容</h4><p>mysql&gt;select * from db;</p>
<h4 id="11、命令的取消"><a href="#11、命令的取消" class="headerlink" title="11、命令的取消"></a>11、命令的取消</h4><p>当命令输入错误而又无法改变（多行语句情形）时，只要在分号出现前就可以用 c来取消该条命令<br>mysql&gt; select *<br>-&gt; user()<br>-&gt; c<br>mysql&gt;<br>这是一些最常用的最基本的操作命令，通过多次练习就可以牢牢掌捂了</p>
<p>==========================================================================</p>
<h3 id="mysql命令"><a href="#mysql命令" class="headerlink" title="mysql命令"></a>mysql命令</h3><p>测试环境：mysql 5.0.45<br>【注：可以在mysql中通过mysql&gt; SELECT VERSION();来查看数据库版本】<br>整理：leo</p>
<h4 id="一、连接MYSQL。"><a href="#一、连接MYSQL。" class="headerlink" title="一、连接MYSQL。"></a>一、连接MYSQL。</h4><p>格式： mysql -h主机地址 -u用户名 －p用户密码</p>
<ul>
<li>1、连接到本机上的MYSQL。<br>首先打开DOS窗口，然后进入目录mysql/bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.<br>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</li>
<li>2、连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>mysql -h110.110.110.110 -u root -p 123; （注:u与root之间可以不用加空格，其它也一样）</li>
<li>3、退出MYSQL命令： exit （回车）</li>
</ul>
<h4 id="二、修改密码。"><a href="#二、修改密码。" class="headerlink" title="二、修改密码。"></a>二、修改密码。</h4><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>
<ul>
<li>1、给root加个密码ab12。首先在DOS下进入目录mysql/bin，然后键入以下命令<br>mysqladmin -u root -password ab12<br>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</li>
<li>2、再将root的密码改为djg345。<br>mysqladmin -u root -p ab12 password djg345<h4 id="三、增加新用户。"><a href="#三、增加新用户。" class="headerlink" title="三、增加新用户。"></a>三、增加新用户。</h4>（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）<br>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</li>
<li><p>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：<br>grant select,insert,update,delete on <em>.</em> to [email=test1@”%]test1@”%[/email]” Identified by “abc”;<br>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p>
</li>
<li><p>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），<br>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。<br>grant select,insert,update,delete on mydb.<em> to [email=test2@localhost]test2@localhost[/email] identified by “abc”;<br>如果你不想test2有密码，可以再打一个命令将密码消掉。<br>grant select,insert,update,delete on mydb.</em> to [email=test2@localhost]test2@localhost[/email] identified by “”;</p>
<h3 id="下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。"><a href="#下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。" class="headerlink" title="下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。"></a>下篇我是MYSQL中有关数据库方面的操作。注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。</h3><h4 id="一、操作技巧"><a href="#一、操作技巧" class="headerlink" title="一、操作技巧"></a>一、操作技巧</h4></li>
<li>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。<br>也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。</li>
<li>2、你可以使用光标上下键调出以前的命令。<h4 id="二、显示命令"><a href="#二、显示命令" class="headerlink" title="二、显示命令"></a>二、显示命令</h4></li>
<li><p>1、显示当前数据库服务器中的数据库列表：<br>mysql&gt; SHOW DATABASES;<br>注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p>
</li>
<li><p>2、显示数据库中的数据表：<br>mysql&gt; USE 库名；<br>mysql&gt; SHOW TABLES;</p>
</li>
<li><p>3、显示数据表的结构：<br>mysql&gt; DESCRIBE 表名;</p>
</li>
<li><p>4、建立数据库：<br>mysql&gt; CREATE DATABASE 库名;</p>
</li>
<li><p>5、建立数据表：<br>mysql&gt; USE 库名;<br>mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));</p>
</li>
<li><p>6、删除数据库：<br>mysql&gt; DROP DATABASE 库名;</p>
</li>
<li><p>7、删除数据表：<br>mysql&gt; DROP TABLE 表名；</p>
</li>
<li><p>8、将表中记录清空：<br>mysql&gt; DELETE FROM 表名;</p>
</li>
<li><p>9、显示表中的记录：<br>mysql&gt; SELECT * FROM 表名;</p>
</li>
<li><p>10、往表中插入记录：<br>mysql&gt; INSERT INTO 表名 VALUES (”hyq”,”M”);</p>
</li>
<li><p>11、更新表中数据：<br>mysql-&gt; UPDATE 表名 SET 字段名1=’a’,字段名2=’b’ WHERE 字段名3=’c’;</p>
</li>
<li><p>12、用文本方式将数据装入数据表中：<br>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;</p>
</li>
<li><p>13、导入.sql文件命令：<br>mysql&gt; USE 数据库名;<br>mysql&gt; SOURCE d:/mysql.sql;</p>
</li>
<li><p>14、命令行修改root密码：<br>mysql&gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;<br>mysql&gt; FLUSH PRIVILEGES;</p>
</li>
<li><p>15、显示use的数据库名：<br>mysql&gt; SELECT DATABASE();</p>
</li>
<li><p>16、显示当前的user：<br>mysql&gt; SELECT USER();</p>
<h4 id="三、一个建库和建表以及插入数据的实例"><a href="#三、一个建库和建表以及插入数据的实例" class="headerlink" title="三、一个建库和建表以及插入数据的实例"></a>三、一个建库和建表以及插入数据的实例</h4><p>drop database if exists school; //如果存在SCHOOL则删除<br>create database school;           //建立库SCHOOL<br>use school;   //打开库SCHOOL<br>create table teacher //建立表TEACHER<br>(<br>id int(3) auto_increment not null primary key,<br>name char(10) not null,<br>address varchar(50) default ‘深圳’,<br>year date<br>); //建表结束<br>//以下为插入字段<br>insert into teacher values(”,’allen’,’大连一中’,’1976-10-10′);<br>insert into teacher values(”,’jack’,’大连二中’,’1975-12-23′);</p>
</li>
</ul>
<h3 id="如果你在mysql提示符键入上面的命令也可以，但不方便调试。"><a href="#如果你在mysql提示符键入上面的命令也可以，但不方便调试。" class="headerlink" title="如果你在mysql提示符键入上面的命令也可以，但不方便调试。"></a>如果你在mysql提示符键入上面的命令也可以，但不方便调试。</h3><ul>
<li>（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c://下，并在DOS状态进入目录[url=file:////mysql//bin]//mysql//bin[/url]，然后键入以下命令：<br>mysql -uroot -p密码 &lt; c://school.sql<br>如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</li>
<li>（2）或者进入命令行后使用 mysql&gt; source c://school.sql; 也可以将school.sql文件导入数据库中。</li>
</ul>
<h3 id="将文本数据转到数据库中"><a href="#将文本数据转到数据库中" class="headerlink" title="将文本数据转到数据库中"></a>将文本数据转到数据库中</h3><ul>
<li>1、文本数据应符合的格式：字段数据之间用tab键隔开，null值用[url=file:////n]//n[/url]来代替.例：<br>3 rose 大连二中 1976-10-10<br>4 mike 大连一中 1975-12-23<br>假设你把这两组数据存为school.txt文件，放在c盘根目录下。</li>
<li>2、数据传入命令 load data local infile “c://school.txt” into table 表名;<br>注意：你最好将文件复制到[url=file:////mysql//bin]//mysql//bin[/url]目录下，并且要先用use命令打表所在的库。</li>
</ul>
<h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><ul>
<li>1.导出整个数据库<br>导出文件默认是存在mysql/bin目录下<br>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名<br>mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</li>
<li>2.导出一个表<br>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名<br>mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</li>
<li>3.导出一个数据库结构<br>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql<br>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</li>
<li>4.带语言参数导出<br>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</li>
</ul>
<h3 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h3><p>例如：数据库名为 dbTest<br>首先，进入mysql<br>mysql -uroot -p123456<br>然后，创建数据库<br>create dbTest<br>exit<br>最后，导入数据库<br>mysql -uroot -p123456 dbTest &lt; dbTest_bk.sql</p>
<h3 id="数据库及表导出导入示例："><a href="#数据库及表导出导入示例：" class="headerlink" title="数据库及表导出导入示例："></a>数据库及表导出导入示例：</h3><h4 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h4><p>mysqldump -u root -p123456 gameTop &gt; gameTop_db.sql</p>
<p>导出数据库的表<br>mysqldump -u -p123456 root gameTop gametop800 &gt; gameTop_table.sql</p>
<p>导出数据库的特定表<br>mysqldump -u root -p123456  gameTop –table gametop800  &gt; gameTop_table.sql</p>
<h4 id="导出数据库（只导结构，不要数据）"><a href="#导出数据库（只导结构，不要数据）" class="headerlink" title="导出数据库（只导结构，不要数据）"></a>导出数据库（只导结构，不要数据）</h4><p>mysqldump -u root -p123456 –opt -d gameTop &gt; gameTop_db.sql<br>或者<br>mysqldump -u root -p123456  -d gameTop &gt; gameTop_db.sql</p>
<p>导出数据库（只导数据，不要结构）<br>mysqldump -u root -p123456  -t gameTop &gt; gameTop_db.sql</p>
<h5 id="注：不加-d-和-t-则既导出结构，也导出数据"><a href="#注：不加-d-和-t-则既导出结构，也导出数据" class="headerlink" title="注：不加 -d 和 -t 则既导出结构，也导出数据"></a>注：不加 -d 和 -t 则既导出结构，也导出数据</h5><p>mysqldump导出抛出异常：<br>mysqldump: Got error: 1044: Access denied for user ‘username’@’%’ to database ‘dbname’ when using LOCK TABLES<br>解决办法，添加参数 –skip-lock-tables：<br>mysqldump –skip-lock-tables -h172.88.12.102 -username-pAnJnVs3C2tYXyTwV dbname&gt; dbname_bk.sql</p>
<hr>
<h4 id="导入数据库："><a href="#导入数据库：" class="headerlink" title="导入数据库："></a>导入数据库：</h4><p>登录MySQL:      mysql -uroot -p123456<br>创建数据库：    create database gameTop;</p>
<p>导入数据库：<br>mysql -uroot -p123456 gameTop &lt; gameTop_db.sql</p>
<p>导入数据库表：<br>mysql -uroot -p123456 gameTop  gametop800 &lt;  gameTop_table.sql</p>
<p>导入数据库表：<br>mysql -uroot -p123456 gameTop  &lt; gameTop_table.sql   （不指定表名）</p>
<h1 id="转载声明：本文转自http-blog-csdn-net-networld2002-archive-2009-04-23-4103407-aspx"><a href="#转载声明：本文转自http-blog-csdn-net-networld2002-archive-2009-04-23-4103407-aspx" class="headerlink" title="转载声明：本文转自http://blog.csdn.net/networld2002/archive/2009/04/23/4103407.aspx"></a>转载声明：本文转自<a href="http://blog.csdn.net/networld2002/archive/2009/04/23/4103407.aspx" target="_blank" rel="external">http://blog.csdn.net/networld2002/archive/2009/04/23/4103407.aspx</a></h1><ul>
<li><p>1:使用SHOW语句找出在服务器上当前存在什么数据库：<br>mysql&gt; SHOW DATABASES;</p>
</li>
<li><p>2:创建一个数据库MYSQLDATA<br>mysql&gt; CREATE DATABASE MYSQLDATA;</p>
</li>
<li><p>3:选择你所创建的数据库<br>mysql&gt; USE MYSQLDATA; (按回车键出现Database changed 时说明操作成功！)</p>
</li>
<li><p>4:查看现在的数据库中存在什么表<br>mysql&gt; SHOW TABLES;</p>
</li>
<li><p>5:创建一个数据库表<br>mysql&gt; CREATE TABLE MYTABLE (name VARCHAR(20), sex CHAR(1));</p>
</li>
<li><p>6:显示表的结构：<br>mysql&gt; DESCRIBE MYTABLE;</p>
</li>
<li><p>7:往表中加入记录<br>mysql&gt; insert into MYTABLE values (”hyq”,”M”);</p>
</li>
<li>8:用文本方式将数据装入数据库表中（例如D:/mysql.txt）<br>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE;</li>
<li><p>9:导入.sql文件命令（例如D:/mysql.sql）<br>mysql&gt;use database;<br>mysql&gt;source d:/mysql.sql;</p>
</li>
<li><p>10:删除表<br>mysql&gt;drop TABLE MYTABLE;</p>
</li>
<li><p>11:清空表<br>mysql&gt;delete from MYTABLE;</p>
</li>
<li><p>12:更新表中数据<br>mysql&gt;update MYTABLE set sex=”f” where name=’hyq’;</p>
</li>
</ul>
<h2 id="以下是无意中在网络看到的使用MySql的管理心得"><a href="#以下是无意中在网络看到的使用MySql的管理心得" class="headerlink" title="以下是无意中在网络看到的使用MySql的管理心得,"></a>以下是无意中在网络看到的使用MySql的管理心得,</h2><p>在windows中MySql以服务形式存在，在使用前应确保此服务已经启动，未启动可用net start mysql命令启动。而Linux中启动时可用“/etc/rc.d/init.d/mysqld start”命令，注意启动者应具有管理员权限。<br>刚安装好的MySql包含一个含空密码的root帐户和一个匿名帐户，这是很大的安全隐患，对于一些重要的应用我们应将安全性尽可能提高，在这里应把匿名帐户删除、 root帐户设置密码，可用如下命令进行：<br>use mysql;<br>delete from User where User=””;<br>update User set Password=PASSWORD(’newpassword’) where User=’root’;</p>
<p>如果要对用户所用的登录终端进行限制，可以更新User表中相应用户的Host字段，在进行了以上更改后应重新启动数据库服务，此时登录时可用如下类似命令：<br>mysql -uroot -p;<br>mysql -uroot -pnewpassword;<br>mysql mydb -uroot -p;<br>mysql mydb -uroot -pnewpassword;<br>上面命令参数是常用参数的一部分，详细情况可参考文档。此处的mydb是要登录的数据库的名称。<br>在 进行开发和实际应用中，用户不应该只用root用户进行连接数据库，虽然使用root用户进行测试时很方便，但会给系统带来重大安全隐患，也不利于管理技 术的提高。我们给一个应用中使用的用户赋予最恰当的数据库权限。如一个只进行数据插入的用户不应赋予其删除数据的权限。<br>MySql的用户管理是通过 User表来实现的，添加新用户常用的方法有两个，一是在User表插入相应的数据行，同时设置相应的权限；二是通过GRANT命令创建具有某种权限的用 户。<br>其中GRANT的常用用法如下：</p>
<p>grant all on mydb.<em> to NewUserName@HostName identified by “password” ;<br>grant usage on </em>.<em> to NewUserName@HostName identified by “password”;<br>grant select,insert,update on mydb.</em> to NewUserName@HostName identified by “password”;<br>grant update,delete on mydb.TestTable to NewUserName@HostName identified by “password”;</p>
<p>若 要给此用户赋予他在相应对象上的权限的管理能力，可在GRANT后面添加WITH GRANT OPTION选项。而对于用插入User表添加的用户，Password字段应用PASSWORD 函数进行更新加密，以防不轨之人窃看密码。对于那些已经不用的用户应给予清除，权限过界的用户应及时回收权限，回收权限可以通过更新User表相应字段， 也可以使用REVOKE操作。<br>下面给出本人从其它资料(www.cn-Java.com)获得的对常用权限的解释：<br>全局管理权限：<br>FILE: 在MySQL服务器上读写文件。<br>PROCESS: 显示或杀死属于其它用户的服务线程。<br>RELOAD: 重载访问控制表，刷新日志等。<br>SHUTDOWN: 关闭MySQL服务。<br>数据库/数据表/数据列权限：<br>ALTER: 修改已存在的数据表(例如增加/删除列)和索引。<br>CREATE: 建立新的数据库或数据表。<br>DELETE: 删除表的记录。<br>DROP: 删除数据表或数据库。<br>INDEX: 建立或删除索引。<br>INSERT: 增加表的记录。<br>SELECT: 显示/搜索表的记录。<br>UPDATE: 修改表中已存在的记录。<br>特别的权限：<br>ALL: 允许做任何事(和root一样)。<br>USAGE: 只允许登录–其它什么也不允许做。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL-数据库常用命令&quot;&gt;&lt;a href=&quot;#MySQL-数据库常用命令&quot; class=&quot;headerlink&quot; title=&quot;MySQL 数据库常用命令&quot;&gt;&lt;/a&gt;MySQL 数据库常用命令&lt;/h2&gt;&lt;h3 id=&quot;1、MySQL常用命令&quot;&gt;&lt;a href=&quot;#1、MySQL常用命令&quot; class=&quot;headerlink&quot; title=&quot;1、MySQL常用命令&quot;&gt;&lt;/a&gt;1、MySQL常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;create database name; 创建数据库&lt;/li&gt;
&lt;li&gt;use databasename; 选择数据库&lt;/li&gt;
&lt;li&gt;drop database name 直接删除数据库，不提醒&lt;/li&gt;
&lt;li&gt;show tables; 显示表&lt;/li&gt;
&lt;li&gt;describe tablename; 表的详细描述&lt;/li&gt;
&lt;li&gt;select 中加上distinct去除重复字段&lt;/li&gt;
&lt;li&gt;mysqladmin drop databasename 删除数据库前，有提示。&lt;/li&gt;
&lt;li&gt;显示当前mysql版本和当前日期&lt;/li&gt;
&lt;li&gt;select version(),current_date;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue.js笔记</title>
    <link href="http://yoursite.com/2017/05/01/vue-js%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/05/01/vue-js笔记/</id>
    <published>2017-05-01T03:29:40.000Z</published>
    <updated>2017-05-16T03:32:59.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="每多学一点知识，就少写一行代码。"><a href="#每多学一点知识，就少写一行代码。" class="headerlink" title="每多学一点知识，就少写一行代码。"></a>每多学一点知识，就少写一行代码。</h1><h2 id="1、Vue-js使用vue-resource实现ajax请求"><a href="#1、Vue-js使用vue-resource实现ajax请求" class="headerlink" title="1、Vue.js使用vue-resource实现ajax请求"></a>1、Vue.js使用vue-resource实现ajax请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by gequn06 on 2017/3/20.</div><div class="line"> */</div><div class="line">import Vue from 'vue/dist/vue.common.js';</div><div class="line">import VueResource from 'vue-resource';</div><div class="line">Vue.use(VueResource);</div><div class="line">new Vue(&#123;</div><div class="line">    el: '#doctorWrap',</div><div class="line">    data: &#123;</div><div class="line">        someData : null</div><div class="line">    &#125;,</div><div class="line">    created :function () &#123;</div><div class="line">        this.$http.get('/public/js/data.json').then(function(response)&#123;</div><div class="line">            console.log(response)</div><div class="line">            // get body data</div><div class="line">            this.someData = response.body.sites;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、Vue-js引用css"><a href="#2、Vue-js引用css" class="headerlink" title="2、Vue.js引用css"></a>2、Vue.js引用css</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></div><div class="line">  @<span class="keyword">import</span> <span class="string">'../assets/hello.css'</span>;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3、过滤器"><a href="#3、过滤器" class="headerlink" title="3、过滤器"></a>3、过滤器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"msg | filterA | filterB"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'hello'</span>,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'thanks'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">filters</span>: &#123;</div><div class="line">    <span class="attr">filterA</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></div><div class="line">      value = value.toString()</div><div class="line">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">filterB</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></div><div class="line">      value = value.toString();</div><div class="line">      <span class="keyword">return</span> value.slice(<span class="number">0</span>, <span class="number">1</span>) + value.charAt(<span class="number">2</span>).toUpperCase() + value.slice(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4、Computed-Properties-and-Watchers"><a href="#4、Computed-Properties-and-Watchers" class="headerlink" title="4、Computed Properties and Watchers"></a>4、Computed Properties and Watchers</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#example'</span>,</div><div class="line">  data: &#123;</div><div class="line">    message: <span class="string">'Hello'</span></div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    <span class="comment">// a computed getter</span></div><div class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// `this` points to the vm instance</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="5、component-lists-rendered-with-v-for-should-have-explicit-keys"><a href="#5、component-lists-rendered-with-v-for-should-have-explicit-keys" class="headerlink" title="5、component lists rendered with v-for should have explicit keys"></a>5、component lists rendered with v-for should have explicit keys</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">v-for需要绑定:key</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"value"</span> <span class="attr">placeholder</span>=<span class="string">"请选择"</span>  <span class="attr">class</span>=<span class="string">"meeting-duration-select"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">el-option</span></span></div><div class="line">            <span class="attr">v-for</span>=<span class="string">"(item,index) in options"</span></div><div class="line">            <span class="attr">:key</span>=<span class="string">"item.value"</span></div><div class="line">            <span class="attr">:label</span>=<span class="string">"item.label"</span></div><div class="line">            <span class="attr">:value</span>=<span class="string">"item.value"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;每多学一点知识，就少写一行代码。&quot;&gt;&lt;a href=&quot;#每多学一点知识，就少写一行代码。&quot; class=&quot;headerlink&quot; title=&quot;每多学一点知识，就少写一行代码。&quot;&gt;&lt;/a&gt;每多学一点知识，就少写一行代码。&lt;/h1&gt;&lt;h2 id=&quot;1、Vue-js使用vue-resource实现ajax请求&quot;&gt;&lt;a href=&quot;#1、Vue-js使用vue-resource实现ajax请求&quot; class=&quot;headerlink&quot; title=&quot;1、Vue.js使用vue-resource实现ajax请求&quot;&gt;&lt;/a&gt;1、Vue.js使用vue-resource实现ajax请求&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Created by gequn06 on 2017/3/20.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import Vue from &#39;vue/dist/vue.common.js&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import VueResource from &#39;vue-resource&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueResource);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    el: &#39;#doctorWrap&#39;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        someData : null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    created :function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.$http.get(&#39;/public/js/data.json&#39;).then(function(response)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            console.log(response)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            // get body data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            this.someData = response.body.sites;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目中的常见问题题_vue_store</title>
    <link href="http://yoursite.com/2017/04/26/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E9%A2%98-vue-store/"/>
    <id>http://yoursite.com/2017/04/26/项目中的常见问题题-vue-store/</id>
    <published>2017-04-26T02:47:16.000Z</published>
    <updated>2017-05-16T03:24:17.462Z</updated>
    
    <content type="html"><![CDATA[<p>我会把我做关于模仿微博的这个项目遇到的一些问题公开在这里，遇到不对的地方请指教，发送<a href="https://www.wang1348168417@gmail.com" target="_blank" rel="external">邮件wang1348168417@gmail.com</a>，或者扫我的微信二维码。<br>一个简单的状态管理</p>
<h3 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源:"></a>单一数据源:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const sourceOfTruth = &#123;&#125;</div><div class="line">const vmA = new Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div><div class="line">const vmB = new Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>每当 sourceOfTruth 发生变化, vmA 和 vmB 都会自动更新它们的视图. 子组件可以通过 this.$root.$data 访问数据. 现在我们有了单一的数据源, 但是调试会很困难. 因为无论何时数据源发生变化都会改变程序, 但是没有任何迹象表明变化发生.<a id="more"></a></p>
<h3 id="store-pattern"><a href="#store-pattern" class="headerlink" title="store pattern"></a>store pattern</h3><p>为了解决上述问题, 我们可以引入 store pattern:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var store = &#123;</div><div class="line">  debug: true,</div><div class="line">  state: &#123;</div><div class="line">    message: 'Hello!'</div><div class="line">  &#125;,</div><div class="line">  setMessageAction (newValue) &#123;</div><div class="line">    this.debug &amp;&amp; console.log('setMessageAction triggered with', newValue)</div><div class="line">    this.state.message = newValue</div><div class="line">  &#125;,</div><div class="line">  clearMessageAction () &#123;</div><div class="line">    this.debug &amp;&amp; console.log('clearMessageAction triggered')</div><div class="line">    this.state.message = 'action B triggered'</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所有的数据改变都发生 store 内. 这种集中的状态管理模式使我们很容易记录变化发生, 如何发生.<br>除了单一的数据源外, 每个 vue 实例或组件也可以有其私有状态:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var vmA = new Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">var vmB = new Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="使用Vuex"><a href="#使用Vuex" class="headerlink" title="使用Vuex"></a>使用Vuex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 如果 Vuex 不是全局的, 那么确保调用 Vue.use(Vuex) 使 Vuex 生效.</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  // 数据源</div><div class="line">  state: &#123;</div><div class="line">    count: 0</div><div class="line">  &#125;,</div><div class="line">  // 数据操作</div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 触发数据变化操作</div><div class="line">store.commit('increment')</div><div class="line"></div><div class="line">console.log(store.state.count) // -&gt; 1</div></pre></td></tr></table></figure>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>store 自动注入到子组件中</p>
<p>通常我们通过计算属性来访问 store 中的数据, 这样就能感知到数据发生变化.<br>根组件的 store 属性会注入到其所有的子组件中. (通过 Vue.use(Vuex) 生效)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const Counter = &#123;</div><div class="line">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</div><div class="line">    computed: &#123;</div><div class="line">        count() &#123;</div><div class="line">            // 子组件通过 this.$store 访问父组件的 store</div><div class="line">            return this.$store.state.count</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">    // 父对象中的 store 自动注入到子组件</div><div class="line">    store,</div><div class="line">    componets: &#123;</div><div class="line">        Counter</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>如果 store 中有许多数据需要访问, 每个数据都需要定义一个计算属性会非常麻烦. Vuex 提供了 mapState 来简化计算属性的定义.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import &#123; mapState &#125; from 'vuex'</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  // ...</div><div class="line">  computed: mapState(&#123;</div><div class="line">    // es6 箭头函数更加简洁</div><div class="line">    count: state =&gt; state.count,</div><div class="line"></div><div class="line">    // 字符串 'count' 等同于 `state =&gt; state.count`</div><div class="line">    countAlias: 'count',</div><div class="line"></div><div class="line">    // 为了访问组件的 `this`, 必须使用普通的函数</div><div class="line">    // 箭头函数会绑定 `this` 到 `mapState` 的参数这个对象</div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      return state.count + this.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果计算属性和 store 中数据是一一对应的, 可以使用更简单的字符串数组:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">computed: mapState([</div><div class="line">  // map this.count to store.state.count</div><div class="line">  'count'</div><div class="line">])</div></pre></td></tr></table></figure></p>
<h3 id="es6-的扩展操作符"><a href="#es6-的扩展操作符" class="headerlink" title="es6 的扩展操作符"></a>es6 的扩展操作符</h3><p>使用 mapState 返回一个对象, 如果组件还有私有的计算属性, 通常我们可以使用 _.extend({localComputed}, mapState(…)) 这种方式合并对象已得到最终的 computed. 使用 es6 的扩展操作符可以简化:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">    localComputed()&#123; /* ... */&#125;,</div><div class="line">    // 通过扩展操作符扩展 computed 对象</div><div class="line">    ...mapState(&#123;</div><div class="line">        // ...</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h3><p>通常计算属性是基于一段 store 数据的代码, 比如过滤一个列表并计数:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">    doneTodoCount() &#123;</div><div class="line">        return this.$store.state.todos.filter(todo =&gt; todo.done).length</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们需要复用这段代码, 基本就是重构提取出一个函数, 但是这样还不是很理想.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Vuex 在 store 中提供了 getters:</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; id: 1, text: '...', done: true &#125;,</div><div class="line">      &#123; id: 2, text: '...', done: false &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doneTodos: state =&gt; &#123;</div><div class="line">      return state.todos.filter(todo =&gt; todo.done)</div><div class="line">    &#125;,</div><div class="line">    doneTodosCount: (state, getters) =&gt; &#123;</div><div class="line">        return getters.doneTodos.length</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 通过 `store.getters` 访问</div><div class="line">store.getters.doneTodosCount</div></pre></td></tr></table></figure></p>
<p>上面的计算属性就可以改成:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">    doneTodoCount() &#123;</div><div class="line">        return this.$store.getters.doneTodoCount</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><p>同 state 的 mapState 类似, getters 也有 mapGetters 来简化计算属性的定义<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import &#123; mapGetters &#125; from 'vuex'</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  // ...</div><div class="line">  computed: &#123;</div><div class="line">    // mix the getters into computed with object spread operator</div><div class="line">    ...mapGetters([</div><div class="line">      'doneTodosCount',</div><div class="line">      'anotherGetter',</div><div class="line">      // ...</div><div class="line">    ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用对象可以自定义对应关系<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mapGetters(&#123;</div><div class="line">  // map this.doneCount to store.getters.doneTodosCount</div><div class="line">  doneCount: 'doneTodosCount'</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h3><p>Vuex 中的 state 只能通过 mutations 来改变. mutations 很像事件, 都有一个类型和处理函数. 处理函数是真正改变 state 的地方, 并以 state 作为第一个参数.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    count: 1</div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      // 改变 state</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>就是事件一样, 我们不能直接调用处理函数, 而是要通过 store.commit(type) 来触发 mutation 处理函数.</p>
<p>store.commit(‘increment’)<br>带 playload commit</p>
<p>我们可以将处理函数的参数放到第二个参数 playload 中:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">  increment (state, payload) &#123;</div><div class="line">    state.count += payload.amount</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">store.commit('increment', &#123;amount: 10&#125;)</div><div class="line">对象风格 commit</div><div class="line"></div><div class="line">store.commit(&#123;</div><div class="line">    type: 'increment',</div><div class="line">    playload: &#123; amount: 10 &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="静默模式"><a href="#静默模式" class="headerlink" title="静默模式"></a>静默模式</h3><p>默认情况下, 每一次 commit 都会发送到插件 (比如: devtools) 中. 可能你会希望某些 commit 不被记录. 这时候可以传递第三个参数以设置为静默模式:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">store.commit('increment', &#123;</div><div class="line">  amount: 1</div><div class="line">&#125;, &#123; silent: true &#125;)</div><div class="line"></div><div class="line">// 对象风格 commit</div><div class="line">store.commit(&#123;</div><div class="line">  type: 'increment',</div><div class="line">  amount: 1</div><div class="line">&#125;, &#123; silent: true &#125;)</div></pre></td></tr></table></figure></p>
<p>Mutations 要遵守 Vue 的响应式规则</p>
<p>即:</p>
<p>提前初始化所有的状态值<br>添加新的属性到对象时, 你应该:<br>使用 Vue.set(obj, ‘newProp’, 123) 或<br>直接替换新的对象: state.obj = {…state.obj, newProp: 123}<br>使用常量为 Mutations 命名</p>
<p>使用常量为 Mutations 命名是各种 Flux 实现常用的模式. 将所有常量放到一个文件中, 我们能看到整个程序有什么情况数据会发生变化.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// mutation-types.js</div><div class="line">export const SOME_MUTATION = 'SOME_MUTATION'</div><div class="line"></div><div class="line">// store.js</div><div class="line">import Vuex from 'vuex'</div><div class="line">import &#123; SOME_MUTATION &#125; from './mutation-types'</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123; ... &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    // es6 特性 computed property name</div><div class="line">    // 属性名称运行时确定</div><div class="line">    [SOME_MUTATION] (state) &#123;</div><div class="line">      // mutate state</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Mutations-必须是同步的"><a href="#Mutations-必须是同步的" class="headerlink" title="Mutations 必须是同步的"></a>Mutations 必须是同步的</h3><p>异步 mutations 调用违反了所有的状态变化必须在 store 中进行的规定. 比如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">  someMutation (state) &#123;</div><div class="line">    api.callAsyncMethod(() =&gt; &#123;</div><div class="line">      state.count++</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当上例中状态变化时, someMutation 已经结束了. 这时候如果有其他状态变化的操作发生, devtools 记录下来的状态变化就是错误的.</p>
<h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><p>我们可以通过 this.$store.commit(‘xxx’) 在组件中调用 mutations, 一般我们将这些调用分装到 methods 中, 同时 Vuex 也提供了 mapMutations 函数简化 methods 定义:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import &#123; mapMutations &#125; from 'vuex'</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  // ...</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      'increment' // 映射 this.increment() 到 this.$store.commit('increment')</div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      add: 'increment' // map this.add() to this.$store.commit('increment')</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><p>异步的 mutations 使程序的状态变化难以追踪. 为了解决异步操作, Vuex 引入了 actions.<br>actions 跟 mutations 非常像, 它们的不同之处在于:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">actions 不改变 state, 而是 commit mutations</div><div class="line">actions 可以包含任意的异步操作</div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    count: 0</div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  actions: &#123;</div><div class="line">    increment (context) &#123;</div><div class="line">      context.commit('increment')</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>actions 接收一个 context 对象作为参数, context 可以访问 commit, getters, state, 但是它不是 store 对象.<br>通常, 我们会使用 es6 的参数结构语法来简化代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">    increment(&#123;commit&#125;) &#123;</div><div class="line">        commit('increment')</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Dispatching-Actions"><a href="#Dispatching-Actions" class="headerlink" title="Dispatching Actions"></a>Dispatching Actions</h3><p>actions 通过 store.dispatch 来触发:</p>
<p>store.dispatch(‘increment’)<br>dispatch 也支持 commit 中的 playload 参数以及对象风格的调用方式.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// dispatch with a payload</div><div class="line">store.dispatch('incrementAsync', &#123;</div><div class="line">  amount: 10</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// dispatch with an object</div><div class="line">store.dispatch(&#123;</div><div class="line">  type: 'incrementAsync',</div><div class="line">  amount: 10</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><p>类似 mapMutations</p>
<p>Actions 组合</p>
<p>actions 通常是异步的, 我们怎么来组合多个 actions 来执行复杂的操作?</p>
<p>首先我们需要知道的是 store.dispatch 返回 actions 中处理函数的返回值, 因此我们可以返回一个 Promise:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  actionA (&#123; commit &#125;) &#123;</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        commit('someMutation')</div><div class="line">        resolve()</div><div class="line">      &#125;, 1000)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</div><div class="line">    // 组合</div><div class="line">    return dispatch('actionA').then(() =&gt; &#123;</div><div class="line">      commit('someOtherMutation')</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">使用 async/await 语法, 可以简化为:</div><div class="line"></div><div class="line">// 假设 getData() 和 getOtherData() 返回 Promises</div><div class="line"></div><div class="line">actions: &#123;</div><div class="line">  async actionA (&#123; commit &#125;) &#123;</div><div class="line">    commit('gotData', await getData())</div><div class="line">  &#125;,</div><div class="line">  async actionB (&#123; dispatch, commit &#125;) &#123;</div><div class="line">    await dispatch('actionA') // wait for actionA to finish</div><div class="line">    commit('gotOtherData', await getOtherData())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>当我们的程序足够大时, store 也会变得非常大, 其中的 state, getters, mutations, actions 也会非常大.</p>
<p>因此 Vuex 允许我们将 store 分成几个 modules, 每个 modules 都有自己的 state, getters, mutations, actions 甚至它自己的 modules.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  state: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;,</div><div class="line">  getters: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const moduleB = &#123;</div><div class="line">  state: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    a: moduleA,</div><div class="line">    b: moduleB</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.state.a // -&gt; moduleA's state</div><div class="line">store.state.b // -&gt; moduleB's state</div></pre></td></tr></table></figure></p>
<h3 id="Modules-当前状态"><a href="#Modules-当前状态" class="headerlink" title="Modules 当前状态"></a>Modules 当前状态</h3><p>在 modules 中, getters 和 mutations 的第一个参数都是 modules 的 state, 同样 actions 的 context.state 也是 modules 的 state, 根节点的状态可以通过 context.rootState 访问到. getters 的可以通过第三个参数访问 $rootState:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  getters: &#123;</div><div class="line">    sumWithRootCount (state, getters, rootState) &#123;</div><div class="line">      return state.count + rootState.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>###　命名空间</p>
<p>modules 的 state 放到根节点的对应的属性中, 而 actions, mutations 和 getters 没有命名空间. 所以多个 modules 可以对同一个 commit 或 dispatch 做响应. 因此必须自己通过前缀或后缀来避免命名冲突.</p>
<p>动态 Modules 注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">store.registerModule('myModule', &#123;</div><div class="line">  // ...</div><div class="line">&#125;)</div><div class="line">keep learning</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我会把我做关于模仿微博的这个项目遇到的一些问题公开在这里，遇到不对的地方请指教，发送&lt;a href=&quot;https://www.wang1348168417@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;邮件wang1348168417@gmail.com&lt;/a&gt;，或者扫我的微信二维码。&lt;br&gt;一个简单的状态管理&lt;/p&gt;
&lt;h3 id=&quot;单一数据源&quot;&gt;&lt;a href=&quot;#单一数据源&quot; class=&quot;headerlink&quot; title=&quot;单一数据源:&quot;&gt;&lt;/a&gt;单一数据源:&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;const sourceOfTruth = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const vmA = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  data: sourceOfTruth&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const vmB = new Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  data: sourceOfTruth&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每当 sourceOfTruth 发生变化, vmA 和 vmB 都会自动更新它们的视图. 子组件可以通过 this.$root.$data 访问数据. 现在我们有了单一的数据源, 但是调试会很困难. 因为无论何时数据源发生变化都会改变程序, 但是没有任何迹象表明变化发生.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Es6新特性</title>
    <link href="http://yoursite.com/2017/04/18/Es6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2017/04/18/Es6新特性/</id>
    <published>2017-04-18T07:36:32.000Z</published>
    <updated>2017-05-16T03:24:10.644Z</updated>
    
    <content type="html"><![CDATA[<p>####ECMAScript 6简介</p>
<p>###1.Class基本语法</p>
<p>##概述<br>JavaScript语言的传统方法是通过构造函数，定义并生成新对象。下面是一个例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>上面这种写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p>
<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。<a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5的构造函数Point，对应ES6的Point类的构造方法。</p>
<p>Point类除了构造方法，还定义了一个toString方法。注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>
<p>ES6的类，完全可以看作构造函数的另一种写法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">typeof</span> Point <span class="comment">// "function"</span></div><div class="line">Point === Point.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p>
<p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</div><div class="line">  doStuff() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'stuff'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bar();</div><div class="line">b.doStuff() <span class="comment">// "stuff"</span></div></pre></td></tr></table></figure></p>
<p>构造函数的prototype属性，在ES6的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toValue()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"></div><div class="line">Point.prototype = &#123;</div><div class="line">  toString()&#123;&#125;,</div><div class="line">  toValue()&#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在类的实例上面调用方法，其实就是调用原型上的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</div><div class="line"></div><div class="line">b.constructor === B.prototype.constructor <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，b是B类的实例，它的constructor方法就是B类原型的constructor方法。</p>
<p>由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(Point.prototype, &#123;</div><div class="line">  toString()&#123;&#125;,</div><div class="line">  toValue()&#123;&#125;</div><div class="line">&#125;);</div><div class="line">prototype对象的<span class="keyword">constructor</span>属性，直接指向“类”的本身，这与ES5的行为是一致的。</div><div class="line"></div><div class="line">Point.prototype.<span class="keyword">constructor</span> === Point // true</div></pre></td></tr></table></figure></p>
<p>另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p>
<p>class Point {<br>  constructor(x, y) {<br>    // …<br>  }</p>
<p>  toString() {<br>    // …<br>  }<br>}</p>
<p>Object.keys(Point.prototype)<br>// []<br>Object.getOwnPropertyNames(Point.prototype)<br>// [“constructor”,”toString”]</p>
<p>上面代码中，toString方法是Point类内部定义的方法，它是不可枚举的。这一点与ES5的行为不一致。</p>
<p>var Point = function (x, y) {<br>  // …<br>};</p>
<p>Point.prototype.toString = function() {<br>  // …<br>};</p>
<p>Object.keys(Point.prototype)<br>// [“toString”]<br>Object.getOwnPropertyNames(Point.prototype)<br>// [“constructor”,”toString”]</p>
<p>上面代码采用ES5的写法，toString方法就是可枚举的。</p>
<p>类的属性名，可以采用表达式。</p>
<p>let methodName = “getArea”;<br>class Square{<br>  constructor(length) {<br>    // …<br>  }</p>
<p>  <a href="">methodName</a> {<br>    // …<br>  }<br>}</p>
<p>上面代码中，Square类的方法名getArea，是从表达式得到的。</p>
<p>constructor方法<br>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</p>
<p>constructor() {}<br>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</p>
<p>class Foo {<br>  constructor() {<br>    return Object.create(null);<br>  }<br>}</p>
<p>new Foo() instanceof Foo<br>// false</p>
<p>上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</p>
<p>类的构造函数，不使用new是没法调用的，会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。</p>
<p>class Foo {<br>  constructor() {<br>    return Object.create(null);<br>  }<br>}</p>
<p>Foo()<br>// TypeError: Class constructor Foo cannot be invoked without ‘new’</p>
<p>类的实例对象<br>生成类的实例对象的写法，与ES5完全一样，也是使用new命令。如果忘记加上new，像函数那样调用Class，将会报错。</p>
<p>// 报错<br>var point = Point(2, 3);</p>
<p>// 正确<br>var point = new Point(2, 3);</p>
<p>与ES5一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</p>
<p>//定义类<br>class Point {</p>
<p>  constructor(x, y) {<br>    this.x = x;<br>    this.y = y;<br>  }</p>
<p>  toString() {<br>    return ‘(‘ + this.x + ‘, ‘ + this.y + ‘)’;<br>  }</p>
<p>}</p>
<p>var point = new Point(2, 3);</p>
<p>point.toString() // (2, 3)</p>
<p>point.hasOwnProperty(‘x’) // true<br>point.hasOwnProperty(‘y’) // true<br>point.hasOwnProperty(‘toString’) // false<br>point.<strong>proto</strong>.hasOwnProperty(‘toString’) // true</p>
<p>上面代码中，x和y都是实例对象point自身的属性（因为定义在this变量上），所以hasOwnProperty方法返回true，而toString是原型对象的属性（因为定义在Point类上），所以hasOwnProperty方法返回false。这些都与ES5的行为保持一致。</p>
<p>与ES5一样，类的所有实例共享一个原型对象。</p>
<p>var p1 = new Point(2,3);<br>var p2 = new Point(3,2);</p>
<p>p1.<strong>proto</strong> === p2.<strong>proto</strong><br>//true</p>
<p>上面代码中，p1和p2都是Point的实例，它们的原型都是Point.prototype，所以<strong>proto</strong>属性是相等的。</p>
<p>这也意味着，可以通过实例的<strong>proto</strong>属性为Class添加方法。</p>
<p>var p1 = new Point(2,3);<br>var p2 = new Point(3,2);</p>
<p>p1.<strong>proto</strong>.printName = function () { return ‘Oops’ };</p>
<p>p1.printName() // “Oops”<br>p2.printName() // “Oops”</p>
<p>var p3 = new Point(4,2);<br>p3.printName() // “Oops”</p>
<p>上面代码在p1的原型上添加了一个printName方法，由于p1的原型就是p2的原型，因此p2也可以调用这个方法。而且，此后新建的实例p3也可以调用这个方法。这意味着，使用实例的<strong>proto</strong>属性改写原型，必须相当谨慎，不推荐使用，因为这会改变Class的原始定义，影响到所有实例。</p>
<p>不存在变量提升<br>Class不存在变量提升（hoist），这一点与ES5完全不同。</p>
<p>new Foo(); // ReferenceError<br>class Foo {}<br>上面代码中，Foo类使用在前，定义在后，这样会报错，因为ES6不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。</p>
<p>{<br>  let Foo = class {};<br>  class Bar extends Foo {<br>  }<br>}<br>上面的代码不会报错，因为Bar继承Foo的时候，Foo已经有定义了。但是，如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。</p>
<p>Class表达式<br>与函数一样，类也可以使用表达式的形式定义。</p>
<p>const MyClass = class Me {<br>  getClassName() {<br>    return Me.name;<br>  }<br>};<br>上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在Class的内部代码可用，指代当前类。</p>
<p>let inst = new MyClass();<br>inst.getClassName() // Me<br>Me.name // ReferenceError: Me is not defined<br>上面代码表示，Me只在Class内部有定义。</p>
<p>如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。</p>
<p>const MyClass = class { /<em> … </em>/ };<br>采用Class表达式，可以写出立即执行的Class。</p>
<p>let person = new class {<br>  constructor(name) {<br>    this.name = name;<br>  }</p>
<p>  sayName() {<br>    console.log(this.name);<br>  }<br>}(‘张三’);</p>
<p>person.sayName(); // “张三”<br>上面代码中，person是一个立即执行的类的实例。</p>
<p>私有方法<br>私有方法是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。</p>
<p>一种做法是在命名上加以区别。</p>
<p>class Widget {</p>
<p>  // 公有方法<br>  foo (baz) {<br>    this._bar(baz);<br>  }</p>
<p>  // 私有方法<br>  _bar(baz) {<br>    return this.snaf = baz;<br>  }</p>
<p>  // …<br>}<br>上面代码中，_bar方法前面的下划线，表示这是一个只限于内部使用的私有方法。但是，这种命名是不保险的，在类的外部，还是可以调用到这个方法。</p>
<p>另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。</p>
<p>class Widget {<br>  foo (baz) {<br>    bar.call(this, baz);<br>  }</p>
<p>  // …<br>}</p>
<p>function bar(baz) {<br>  return this.snaf = baz;<br>}<br>上面代码中，foo是公有方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。</p>
<p>还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。</p>
<p>const bar = Symbol(‘bar’);<br>const snaf = Symbol(‘snaf’);</p>
<p>export default class myClass{</p>
<p>  // 公有方法<br>  foo(baz) {<br>    this<a href="baz">bar</a>;<br>  }</p>
<p>  // 私有方法<br>  <a href="baz">bar</a> {<br>    return this[snaf] = baz;<br>  }</p>
<p>  // …<br>};<br>上面代码中，bar和snaf都是Symbol值，导致第三方无法获取到它们，因此达到了私有方法和私有属性的效果。</p>
<p>this的指向<br>类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p>
<p>class Logger {<br>  printName(name = ‘there’) {<br>    this.print(<code>Hello ${name}</code>);<br>  }</p>
<p>  print(text) {<br>    console.log(text);<br>  }<br>}</p>
<p>const logger = new Logger();<br>const { printName } = logger;<br>printName(); // TypeError: Cannot read property ‘print’ of undefined<br>上面代码中，printName方法中的this，默认指向Logger类的实例。但是，如果将这个方法提取出来单独使用，this会指向该方法运行时所在的环境，因为找不到print方法而导致报错。</p>
<p>一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了。</p>
<p>class Logger {<br>  constructor() {<br>    this.printName = this.printName.bind(this);<br>  }</p>
<p>  // …<br>}<br>另一种解决方法是使用箭头函数。</p>
<p>class Logger {<br>  constructor() {<br>    this.printName = (name = ‘there’) =&gt; {<br>      this.print(<code>Hello ${name}</code>);<br>    };<br>  }</p>
<p>  // …<br>}<br>还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。</p>
<p>function selfish (target) {<br>  const cache = new WeakMap();<br>  const handler = {<br>    get (target, key) {<br>      const value = Reflect.get(target, key);<br>      if (typeof value !== ‘function’) {<br>        return value;<br>      }<br>      if (!cache.has(value)) {<br>        cache.set(value, value.bind(target));<br>      }<br>      return cache.get(value);<br>    }<br>  };<br>  const proxy = new Proxy(target, handler);<br>  return proxy;<br>}</p>
<p>const logger = selfish(new Logger());<br>严格模式<br>类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。</p>
<p>考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。</p>
<p>name属性<br>由于本质上，ES6的类只是ES5的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。</p>
<p>class Point {}<br>Point.name // “Point”<br>name属性总是返回紧跟在class关键字后面的类名。</p>
<p>Class的继承<br>基本用法<br>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>
<p>class ColorPoint extends Point {}<br>上面代码定义了一个ColorPoint类，该类通过extends关键字，继承了Point类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个Point类。下面，我们在ColorPoint内部加上代码。</p>
<p>class ColorPoint extends Point {<br>  constructor(x, y, color) {<br>    super(x, y); // 调用父类的constructor(x, y)<br>    this.color = color;<br>  }</p>
<p>  toString() {<br>    return this.color + ‘ ‘ + super.toString(); // 调用父类的toString()<br>  }<br>}<br>上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>
<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>
<p>class Point { /<em> … </em>/ }</p>
<p>class ColorPoint extends Point {<br>  constructor() {<br>  }<br>}</p>
<p>let cp = new ColorPoint(); // ReferenceError<br>上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。</p>
<p>ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>
<p>如果子类没有定义constructor方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有constructor方法。</p>
<p>constructor(…args) {<br>  super(…args);<br>}<br>另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，是基于对父类实例加工，只有super方法才能返回父类实例。</p>
<p>class Point {<br>  constructor(x, y) {<br>    this.x = x;<br>    this.y = y;<br>  }<br>}</p>
<p>class ColorPoint extends Point {<br>  constructor(x, y, color) {<br>    this.color = color; // ReferenceError<br>    super(x, y);<br>    this.color = color; // 正确<br>  }<br>}<br>上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。</p>
<p>下面是生成子类实例的代码。</p>
<p>let cp = new ColorPoint(25, 8, ‘green’);</p>
<p>cp instanceof ColorPoint // true<br>cp instanceof Point // true<br>上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与ES5的行为完全一致。</p>
<p>类的prototype属性和<strong>proto</strong>属性<br>大多数浏览器的ES5实现之中，每一个对象都有<strong>proto</strong>属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和<strong>proto</strong>属性，因此同时存在两条继承链。</p>
<p>（1）子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</p>
<p>（2）子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。</p>
<p>class A {<br>}</p>
<p>class B extends A {<br>}</p>
<p>B.<strong>proto</strong> === A // true<br>B.prototype.<strong>proto</strong> === A.prototype // true<br>上面代码中，子类B的<strong>proto</strong>属性指向父类A，子类B的prototype属性的<strong>proto</strong>属性指向父类A的prototype属性。</p>
<p>这样的结果是因为，类的继承是按照下面的模式实现的。</p>
<p>class A {<br>}</p>
<p>class B {<br>}</p>
<p>// B的实例继承A的实例<br>Object.setPrototypeOf(B.prototype, A.prototype);<br>const b = new B();</p>
<p>// B的实例继承A的静态属性<br>Object.setPrototypeOf(B, A);<br>const b = new B();<br>《对象的扩展》一章给出过Object.setPrototypeOf方法的实现。</p>
<p>Object.setPrototypeOf = function (obj, proto) {<br>  obj.<strong>proto</strong> = proto;<br>  return obj;<br>}<br>因此，就得到了上面的结果。</p>
<p>Object.setPrototypeOf(B.prototype, A.prototype);<br>// 等同于<br>B.prototype.<strong>proto</strong> = A.prototype;</p>
<p>Object.setPrototypeOf(B, A);<br>// 等同于<br>B.<strong>proto</strong> = A;<br>这两条继承链，可以这样理解：作为一个对象，子类（B）的原型（<strong>proto</strong>属性）是父类（A）；作为一个构造函数，子类（B）的原型（prototype属性）是父类的实例。</p>
<p>Object.create(A.prototype);<br>// 等同于<br>B.prototype.<strong>proto</strong> = A.prototype;<br>Extends 的继承目标<br>extends关键字后面可以跟多种类型的值。</p>
<p>class B extends A {<br>}<br>上面代码的A，只要是一个有prototype属性的函数，就能被B继承。由于函数都有prototype属性（除了Function.prototype函数），因此A可以是任意函数。</p>
<p>下面，讨论三种特殊情况。</p>
<p>第一种特殊情况，子类继承Object类。</p>
<p>class A extends Object {<br>}</p>
<p>A.<strong>proto</strong> === Object // true<br>A.prototype.<strong>proto</strong> === Object.prototype // true<br>这种情况下，A其实就是构造函数Object的复制，A的实例就是Object的实例。</p>
<p>第二种特殊情况，不存在任何继承。</p>
<p>class A {<br>}</p>
<p>A.<strong>proto</strong> === Function.prototype // true<br>A.prototype.<strong>proto</strong> === Object.prototype // true<br>这种情况下，A作为一个基类（即不存在任何继承），就是一个普通函数，所以直接继承Funciton.prototype。但是，A调用后返回一个空对象（即Object实例），所以A.prototype.<strong>proto</strong>指向构造函数（Object）的prototype属性。</p>
<p>第三种特殊情况，子类继承null。</p>
<p>class A extends null {<br>}</p>
<p>A.<strong>proto</strong> === Function.prototype // true<br>A.prototype.<strong>proto</strong> === undefined // true<br>这种情况与第二种情况非常像。A也是一个普通函数，所以直接继承Funciton.prototype。但是，A调用后返回的对象不继承任何方法，所以它的<strong>proto</strong>指向Function.prototype，即实质上执行了下面的代码。</p>
<p>class C extends null {<br>  constructor() { return Object.create(null); }<br>}<br>Object.getPrototypeOf()<br>Object.getPrototypeOf方法可以用来从子类上获取父类。</p>
<p>Object.getPrototypeOf(ColorPoint) === Point<br>// true<br>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>
<p>super 关键字<br>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>
<p>第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>
<p>class A {}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>  }<br>}<br>上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p>
<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B，因此super()在这里相当于A.prototype.constructor.call(this)。</p>
<p>class A {<br>  constructor() {<br>    console.log(new.target.name);<br>  }<br>}<br>class B extends A {<br>  constructor() {<br>    super();<br>  }<br>}<br>new A() // A<br>new B() // B<br>上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。</p>
<p>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。</p>
<p>class A {}</p>
<p>class B extends A {<br>  m() {<br>    super(); // 报错<br>  }<br>}<br>上面代码中，super()用在B类的m方法之中，就会造成句法错误。</p>
<p>第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p>
<p>class A {<br>  p() {<br>    return 2;<br>  }<br>}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    console.log(super.p()); // 2<br>  }<br>}</p>
<p>let b = new B();<br>上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。</p>
<p>这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。</p>
<p>class A {<br>  constructor() {<br>    this.p = 2;<br>  }<br>}</p>
<p>class B extends A {<br>  get m() {<br>    return super.p;<br>  }<br>}</p>
<p>let b = new B();<br>b.m // undefined<br>上面代码中，p是父类A实例的属性，super.p就引用不到它。</p>
<p>如果属性定义在父类的原型对象上，super就可以取到。</p>
<p>class A {}<br>A.prototype.x = 2;</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    console.log(super.x) // 2<br>  }<br>}</p>
<p>let b = new B();<br>上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。</p>
<p>ES6 规定，通过super调用父类的方法时，super会绑定子类的this。</p>
<p>class A {<br>  constructor() {<br>    this.x = 1;<br>  }<br>  print() {<br>    console.log(this.x);<br>  }<br>}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    this.x = 2;<br>  }<br>  m() {<br>    super.print();<br>  }<br>}</p>
<p>let b = new B();<br>b.m() // 2<br>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()会绑定子类B的this，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>
<p>由于绑定子类的this，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。</p>
<p>class A {<br>  constructor() {<br>    this.x = 1;<br>  }<br>}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    this.x = 2;<br>    super.x = 3;<br>    console.log(super.x); // undefined<br>    console.log(this.x); // 3<br>  }<br>}</p>
<p>let b = new B();<br>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p>
<p>如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。</p>
<p>class Parent {<br>  static myMethod(msg) {<br>    console.log(‘static’, msg);<br>  }</p>
<p>  myMethod(msg) {<br>    console.log(‘instance’, msg);<br>  }<br>}</p>
<p>class Child extends Parent {<br>  static myMethod(msg) {<br>    super.myMethod(msg);<br>  }</p>
<p>  myMethod(msg) {<br>    super.myMethod(msg);<br>  }<br>}</p>
<p>Child.myMethod(1); // static 1</p>
<p>var child = new Child();<br>child.myMethod(2); // instance 2<br>上面代码中，super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p>
<p>注意，使用super的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。</p>
<p>class A {}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    console.log(super); // 报错<br>  }<br>}<br>上面代码中，console.log(super)当中的super，无法看出是作为函数使用，还是作为对象使用，所以 JavaScript 引擎解析代码的时候就会报错。这时，如果能清晰地表明super的数据类型，就不会报错。</p>
<p>class A {}</p>
<p>class B extends A {<br>  constructor() {<br>    super();<br>    console.log(super.valueOf() instanceof B); // true<br>  }<br>}</p>
<p>let b = new B();<br>上面代码中，super.valueOf()表明super是一个对象，因此就不会报错。同时，由于super绑定B的this，所以super.valueOf()返回的是一个B的实例。</p>
<p>最后，由于对象总是继承其他对象的，所以可以在任意一个对象中，使用super关键字。</p>
<p>var obj = {<br>  toString() {<br>    return “MyObject: “ + super.toString();<br>  }<br>};</p>
<p>obj.toString(); // MyObject: [object Object]<br>实例的<strong>proto</strong>属性<br>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。</p>
<p>var p1 = new Point(2, 3);<br>var p2 = new ColorPoint(2, 3, ‘red’);</p>
<p>p2.<strong>proto</strong> === p1.<strong>proto</strong> // false<br>p2.<strong>proto</strong>.<strong>proto</strong> === p1.<strong>proto</strong> // true<br>上面代码中，ColorPoint继承了Point，导致前者原型的原型是后者的原型。</p>
<p>因此，通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为。</p>
<p>p2.<strong>proto</strong>.<strong>proto</strong>.printName = function () {<br>  console.log(‘Ha’);<br>};</p>
<p>p1.printName() // “Ha”<br>上面代码在ColorPoint的实例p2上向Point类添加方法，结果影响到了Point的实例p1。</p>
<p>原生构造函数的继承<br>原生构造函数是指语言内置的构造函数，通常用来生成数据结构。ECMAScript的原生构造函数大致有下面这些。</p>
<p>Boolean()<br>Number()<br>String()<br>Array()<br>Date()<br>Function()<br>RegExp()<br>Error()<br>Object()<br>以前，这些原生构造函数是无法继承的，比如，不能自己定义一个Array的子类。</p>
<p>function MyArray() {<br>  Array.apply(this, arguments);<br>}</p>
<p>MyArray.prototype = Object.create(Array.prototype, {<br>  constructor: {<br>    value: MyArray,<br>    writable: true,<br>    configurable: true,<br>    enumerable: true<br>  }<br>});<br>上面代码定义了一个继承Array的MyArray类。但是，这个类的行为与Array完全不一致。</p>
<p>var colors = new MyArray();<br>colors[0] = “red”;<br>colors.length  // 0</p>
<p>colors.length = 0;<br>colors[0]  // “red”<br>之所以会发生这种情况，是因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。</p>
<p>ES5是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。比如，Array构造函数有一个内部属性[[DefineOwnProperty]]，用来定义新属性时，更新length属性，这个内部属性无法在子类获取，导致子类的length属性行为不正常。</p>
<p>下面的例子中，我们想让一个普通对象继承Error对象。</p>
<p>var e = {};</p>
<p>Object.getOwnPropertyNames(Error.call(e))<br>// [ ‘stack’ ]</p>
<p>Object.getOwnPropertyNames(e)<br>// []<br>上面代码中，我们想通过Error.call(e)这种写法，让普通对象e具有Error对象的实例属性。但是，Error.call()完全忽略传入的第一个参数，而是返回一个新对象，e本身没有任何变化。这证明了Error.call(e)这种写法，无法继承原生构造函数。</p>
<p>ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。下面是一个继承Array的例子。</p>
<p>class MyArray extends Array {<br>  constructor(…args) {<br>    super(…args);<br>  }<br>}</p>
<p>var arr = new MyArray();<br>arr[0] = 12;<br>arr.length // 1</p>
<p>arr.length = 0;<br>arr[0] // undefined<br>上面代码定义了一个MyArray类，继承了Array构造函数，因此就可以从MyArray生成数组的实例。这意味着，ES6可以自定义原生数据结构（比如Array、String等）的子类，这是ES5无法做到的。</p>
<p>上面这个例子也说明，extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。下面就是定义了一个带版本功能的数组。</p>
<p>class VersionedArray extends Array {<br>  constructor() {<br>    super();<br>    this.history = [[]];<br>  }<br>  commit() {<br>    this.history.push(this.slice());<br>  }<br>  revert() {<br>    this.splice(0, this.length, …this.history[this.history.length - 1]);<br>  }<br>}</p>
<p>var x = new VersionedArray();</p>
<p>x.push(1);<br>x.push(2);<br>x // [1, 2]<br>x.history // [[]]</p>
<p>x.commit();<br>x.history // [[], [1, 2]]<br>x.push(3);<br>x // [1, 2, 3]</p>
<p>x.revert();<br>x // [1, 2]<br>上面代码中，VersionedArray结构会通过commit方法，将自己的当前状态存入history属性，然后通过revert方法，可以撤销当前版本，回到上一个版本。除此之外，VersionedArray依然是一个数组，所有原生的数组方法都可以在它上面调用。</p>
<p>下面是一个自定义Error子类的例子。</p>
<p>class ExtendableError extends Error {<br>  constructor(message) {<br>    super();<br>    this.message = message;<br>    this.stack = (new Error()).stack;<br>    this.name = this.constructor.name;<br>  }<br>}</p>
<p>class MyError extends ExtendableError {<br>  constructor(m) {<br>    super(m);<br>  }<br>}</p>
<p>var myerror = new MyError(‘ll’);<br>myerror.message // “ll”<br>myerror instanceof Error // true<br>myerror.name // “MyError”<br>myerror.stack<br>// Error<br>//     at MyError.ExtendableError<br>//     …<br>注意，继承Object的子类，有一个行为差异。</p>
<p>class NewObj extends Object{<br>  constructor(){<br>    super(…arguments);<br>  }<br>}<br>var o = new NewObj({attr: true});<br>console.log(o.attr === true);  // false<br>上面代码中，NewObj继承了Object，但是无法通过super方法向父类Object传参。这是因为ES6改变了Object构造函数的行为，一旦发现Object方法不是通过new Object()这种形式调用，ES6规定Object构造函数会忽略参数。</p>
<p>Class的取值函数（getter）和存值函数（setter）<br>与ES5一样，在Class内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>
<p>class MyClass {<br>  constructor() {<br>    // …<br>  }<br>  get prop() {<br>    return ‘getter’;<br>  }<br>  set prop(value) {<br>    console.log(‘setter: ‘+value);<br>  }<br>}</p>
<p>let inst = new MyClass();</p>
<p>inst.prop = 123;<br>// setter: 123</p>
<p>inst.prop<br>// ‘getter’<br>上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</p>
<p>存值函数和取值函数是设置在属性的descriptor对象上的。</p>
<p>class CustomHTMLElement {<br>  constructor(element) {<br>    this.element = element;<br>  }</p>
<p>  get html() {<br>    return this.element.innerHTML;<br>  }</p>
<p>  set html(value) {<br>    this.element.innerHTML = value;<br>  }<br>}</p>
<p>var descriptor = Object.getOwnPropertyDescriptor(<br>  CustomHTMLElement.prototype, “html”);<br>“get” in descriptor  // true<br>“set” in descriptor  // true<br>上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与ES5完全一致。</p>
<p>Class 的 Generator 方法<br>如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。</p>
<p>class Foo {<br>  constructor(…args) {<br>    this.args = args;<br>  }</p>
<ul>
<li><a href="">Symbol.iterator</a> {<br>for (let arg of this.args) {<br>  yield arg;<br>}<br>}<br>}</li>
</ul>
<p>for (let x of new Foo(‘hello’, ‘world’)) {<br>  console.log(x);<br>}<br>// hello<br>// world<br>上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个 Generator 函数。Symbol.iterator方法返回一个Foo类的默认遍历器，for…of循环会自动调用这个遍历器。</p>
<p>Class 的静态方法<br>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>Foo.classMethod() // ‘hello’</p>
<p>var foo = new Foo();<br>foo.classMethod()<br>// TypeError: foo.classMethod is not a function<br>上面代码中，Foo类的classMethod方法前有static关键字，表明该方法是一个静态方法，可以直接在Foo类上调用（Foo.classMethod()），而不是在Foo类的实例上调用。如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。</p>
<p>父类的静态方法，可以被子类继承。</p>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>class Bar extends Foo {<br>}</p>
<p>Bar.classMethod(); // ‘hello’<br>上面代码中，父类Foo有一个静态方法，子类Bar可以调用这个方法。</p>
<p>静态方法也是可以从super对象上调用的。</p>
<p>class Foo {<br>  static classMethod() {<br>    return ‘hello’;<br>  }<br>}</p>
<p>class Bar extends Foo {<br>  static classMethod() {<br>    return super.classMethod() + ‘, too’;<br>  }<br>}</p>
<p>Bar.classMethod();<br>Class的静态属性和实例属性<br>静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。</p>
<p>class Foo {<br>}</p>
<p>Foo.prop = 1;<br>Foo.prop // 1<br>上面的写法为Foo类定义了一个静态属性prop。</p>
<p>目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</p>
<p>// 以下两种写法都无效<br>class Foo {<br>  // 写法一<br>  prop: 2</p>
<p>  // 写法二<br>  static prop: 2<br>}</p>
<p>Foo.prop // undefined<br>ES7有一个静态属性的提案，目前Babel转码器支持。</p>
<p>这个提案对实例属性和静态属性，都规定了新的写法。</p>
<p>（1）类的实例属性</p>
<p>类的实例属性可以用等式，写入类的定义之中。</p>
<p>class MyClass {<br>  myProp = 42;</p>
<p>  constructor() {<br>    console.log(this.myProp); // 42<br>  }<br>}<br>上面代码中，myProp就是MyClass的实例属性。在MyClass的实例上，可以读取这个属性。</p>
<p>以前，我们定义实例属性，只能写在类的constructor方法里面。</p>
<p>class ReactCounter extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      count: 0<br>    };<br>  }<br>}<br>上面代码中，构造方法constructor里面，定义了this.state属性。</p>
<p>有了新的写法以后，可以不在constructor方法里面定义。</p>
<p>class ReactCounter extends React.Component {<br>  state = {<br>    count: 0<br>  };<br>}<br>这种写法比以前更清晰。</p>
<p>为了可读性的目的，对于那些在constructor里面已经定义的实例属性，新写法允许直接列出。</p>
<p>class ReactCounter extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      count: 0<br>    };<br>  }<br>  state;<br>}<br>（2）类的静态属性</p>
<p>类的静态属性只要在上面的实例属性写法前面，加上static关键字就可以了。</p>
<p>class MyClass {<br>  static myStaticProp = 42;</p>
<p>  constructor() {<br>    console.log(MyClass.myStaticProp); // 42<br>  }<br>}<br>同样的，这个新写法大大方便了静态属性的表达。</p>
<p>// 老写法<br>class Foo {<br>}<br>Foo.prop = 1;</p>
<p>// 新写法<br>class Foo {<br>  static prop = 1;<br>}<br>上面代码中，老写法的静态属性定义在类的外部。整个类生成以后，再生成静态属性。这样让人很容易忽略这个静态属性，也不符合相关代码应该放在一起的代码组织原则。另外，新写法是显式声明（declarative），而不是赋值处理，语义更好。</p>
<p>类的私有属性<br>目前，有一个提案，为class加了私有属性。方法是在属性名之前，使用#表示。</p>
<p>class Point {</p>
<p>  #x;</p>
<p>  constructor(x = 0) {</p>
<pre><code>#x = +x;
</code></pre><p>  }</p>
<p>  get x() { return #x }<br>  set x(value) { #x = +value }<br>}<br>上面代码中，#x就表示私有属性x，在Point类之外是读取不到这个属性的。还可以看到，私有属性与实例的属性是可以同名的（比如，#x与get x()）。</p>
<p>私有属性可以指定初始值，在构造函数执行时进行初始化。</p>
<p>class Point {</p>
<p>  #x = 0;<br>  constructor() {</p>
<pre><code>#x; // 0
</code></pre><p>  }<br>}<br>之所以要引入一个新的前缀#表示私有属性，而没有采用private关键字，是因为 JavaScript 是一门动态语言，使用独立的符号似乎是唯一的可靠方法，能够准确地区分一种属性是私有属性。另外，Ruby 语言使用@表示私有属性，ES6 没有用这个符号而使用#，是因为@已经被留给了 Decorator。</p>
<p>该提案只规定了私有属性的写法。但是，很自然地，它也可以用来写私有方法。</p>
<p>class Foo {</p>
<p>  #a;</p>
<p>  #b;</p>
<p>  #sum() { return #a + #b; }<br>  printSum() { console.log(#sum()); }<br>  constructor(a, b) { #a = a; #b = b; }<br>}<br>new.target属性<br>new是从构造函数生成实例的命令。ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。</p>
<p>function Person(name) {<br>  if (new.target !== undefined) {<br>    this.name = name;<br>  } else {<br>    throw new Error(‘必须使用new生成实例’);<br>  }<br>}</p>
<p>// 另一种写法<br>function Person(name) {<br>  if (new.target === Person) {<br>    this.name = name;<br>  } else {<br>    throw new Error(‘必须使用new生成实例’);<br>  }<br>}</p>
<p>var person = new Person(‘张三’); // 正确<br>var notAPerson = Person.call(person, ‘张三’);  // 报错<br>上面代码确保构造函数只能通过new命令调用。</p>
<p>Class内部调用new.target，返回当前Class。</p>
<p>class Rectangle {<br>  constructor(length, width) {<br>    console.log(new.target === Rectangle);<br>    this.length = length;<br>    this.width = width;<br>  }<br>}</p>
<p>var obj = new Rectangle(3, 4); // 输出 true<br>需要注意的是，子类继承父类时，new.target会返回子类。</p>
<p>class Rectangle {<br>  constructor(length, width) {<br>    console.log(new.target === Rectangle);<br>    // …<br>  }<br>}</p>
<p>class Square extends Rectangle {<br>  constructor(length) {<br>    super(length, length);<br>  }<br>}</p>
<p>var obj = new Square(3); // 输出 false<br>上面代码中，new.target会返回子类。</p>
<p>利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。</p>
<p>class Shape {<br>  constructor() {<br>    if (new.target === Shape) {<br>      throw new Error(‘本类不能实例化’);<br>    }<br>  }<br>}</p>
<p>class Rectangle extends Shape {<br>  constructor(length, width) {<br>    super();<br>    // …<br>  }<br>}</p>
<p>var x = new Shape();  // 报错<br>var y = new Rectangle(3, 4);  // 正确<br>上面代码中，Shape类不能被实例化，只能用于继承。</p>
<p>注意，在函数外部，使用new.target会报错。</p>
<p>Mixin模式的实现<br>Mixin模式指的是，将多个类的接口“混入”（mix in）另一个类。它在ES6的实现如下。</p>
<p>function mix(…mixins) {<br>  class Mix {}</p>
<p>  for (let mixin of mixins) {<br>    copyProperties(Mix, mixin);<br>    copyProperties(Mix.prototype, mixin.prototype);<br>  }</p>
<p>  return Mix;<br>}</p>
<p>function copyProperties(target, source) {<br>  for (let key of Reflect.ownKeys(source)) {<br>    if ( key !== “constructor”<br>      &amp;&amp; key !== “prototype”<br>      &amp;&amp; key !== “name”<br>    ) {<br>      let desc = Object.getOwnPropertyDescriptor(source, key);<br>      Object.defineProperty(target, key, desc);<br>    }<br>  }<br>}<br>上面代码的mix函数，可以将多个对象合成为一个类。使用的时候，只要继承这个类即可。</p>
<p>class DistributedEdit extends mix(Loggable, Serializable) {<br>  // …<br>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####ECMAScript 6简介&lt;/p&gt;
&lt;p&gt;###1.Class基本语法&lt;/p&gt;
&lt;p&gt;##概述&lt;br&gt;JavaScript语言的传统方法是通过构造函数，定义并生成新对象。下面是一个例子。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y = y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Point.prototype.toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y + &lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Point(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这种写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的程序员感到困惑。&lt;/p&gt;
&lt;p&gt;ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>yilia配置</title>
    <link href="http://yoursite.com/2017/04/11/yilia%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/04/11/yilia配置/</id>
    <published>2017-04-11T02:41:53.000Z</published>
    <updated>2017-05-16T03:23:52.809Z</updated>
    
    <content type="html"><![CDATA[<p>主题配置文件在主目录下的_config.yml，请根据自己需要修改使用。 完整配置例子，可以参考我的博客备份</p>
<h1 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h1><p>menu:<br>  主页: /<br>  随笔: /tags/随笔/</p>
<h1 id="SubNav"><a href="#SubNav" class="headerlink" title="SubNav"></a>SubNav</h1><p>subnav:<br>  github: “#”<br>  weibo: “#”<br>  rss: “#”<a id="more"></a><br>  zhihu: “#”</p>
<p>  #qq: “#”</p>
<p>  #weixin: “#”</p>
<p>  #jianshu: “#”</p>
<p>  #douban: “#”</p>
<p>  #segmentfault: “#”</p>
<p>  #bilibili: “#”</p>
<p>  #acfun: “#”</p>
<p>  #mail: “mailto:litten225@qq.com”</p>
<p>  #facebook: “#”</p>
<p>  #google: “#”</p>
<p>  #twitter: “#”</p>
<p>  #linkedin: “#”</p>
<p>rss: /atom.xml</p>
<h1 id="是否需要修改-root-路径"><a href="#是否需要修改-root-路径" class="headerlink" title="是否需要修改 root 路径"></a>是否需要修改 root 路径</h1><h1 id="如果您的网站存放在子目录中，例如-http-yoursite-com-blog，"><a href="#如果您的网站存放在子目录中，例如-http-yoursite-com-blog，" class="headerlink" title="如果您的网站存放在子目录中，例如 http://yoursite.com/blog，"></a>如果您的网站存放在子目录中，例如 <a href="http://yoursite.com/blog，">http://yoursite.com/blog，</a></h1><h1 id="请将您的-url-设为-http-yoursite-com-blog-并把-root-设为-blog-。"><a href="#请将您的-url-设为-http-yoursite-com-blog-并把-root-设为-blog-。" class="headerlink" title="请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。"></a>请将您的 url 设为 <a href="http://yoursite.com/blog">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</h1><p>root: </p>
<h1 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h1><h1 id="文章太长，截断按钮文字"><a href="#文章太长，截断按钮文字" class="headerlink" title="文章太长，截断按钮文字"></a>文章太长，截断按钮文字</h1><p>excerpt_link: more</p>
<h1 id="文章卡片右下角常驻链接，不需要请设置为false"><a href="#文章卡片右下角常驻链接，不需要请设置为false" class="headerlink" title="文章卡片右下角常驻链接，不需要请设置为false"></a>文章卡片右下角常驻链接，不需要请设置为false</h1><p>show_all_link: ‘展开全文’</p>
<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><p>mathjax: false</p>
<h1 id="是否在新窗口打开链接"><a href="#是否在新窗口打开链接" class="headerlink" title="是否在新窗口打开链接"></a>是否在新窗口打开链接</h1><p>open_in_new: false</p>
<h1 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h1><h1 id="请在需要打赏的文章的md文件头部，设置属性reward-true"><a href="#请在需要打赏的文章的md文件头部，设置属性reward-true" class="headerlink" title="请在需要打赏的文章的md文件头部，设置属性reward: true"></a>请在需要打赏的文章的md文件头部，设置属性reward: true</h1><h1 id="打赏基础设定：0-关闭打赏；-1-文章对应的md文件里有reward-true属性，才有打赏；-2-所有文章均有打赏"><a href="#打赏基础设定：0-关闭打赏；-1-文章对应的md文件里有reward-true属性，才有打赏；-2-所有文章均有打赏" class="headerlink" title="打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏"></a>打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</h1><p>reward_type: 2</p>
<h1 id="打赏wording"><a href="#打赏wording" class="headerlink" title="打赏wording"></a>打赏wording</h1><p>reward_wording: ‘谢谢你请我吃糖果’</p>
<h1 id="支付宝二维码图片地址，跟你设置头像的方式一样。比如：-assets-img-alipay-jpg"><a href="#支付宝二维码图片地址，跟你设置头像的方式一样。比如：-assets-img-alipay-jpg" class="headerlink" title="支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg"></a>支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</h1><p>alipay: </p>
<h1 id="微信二维码图片地址"><a href="#微信二维码图片地址" class="headerlink" title="微信二维码图片地址"></a>微信二维码图片地址</h1><p>weixin: </p>
<h1 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h1><p>baidu_analytics: ‘’<br>google_analytics: ‘’<br>favicon: /favicon.png</p>
<p>#你的头像url<br>avatar:</p>
<p>#是否开启分享<br>share_jia: true</p>
<p>#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</p>
<p>#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论<br>duoshuo: false</p>
<h1 id="样式定制-一般不需要修改，除非有很强的定制欲望…"><a href="#样式定制-一般不需要修改，除非有很强的定制欲望…" class="headerlink" title="样式定制 - 一般不需要修改，除非有很强的定制欲望…"></a>样式定制 - 一般不需要修改，除非有很强的定制欲望…</h1><p>style:</p>
<h1 id="头像上面的背景颜色"><a href="#头像上面的背景颜色" class="headerlink" title="头像上面的背景颜色"></a>头像上面的背景颜色</h1><p>  header: ‘#4d4d4d’</p>
<h1 id="右滑板块背景"><a href="#右滑板块背景" class="headerlink" title="右滑板块背景"></a>右滑板块背景</h1><p>  slider: ‘linear-gradient(200deg,#a0cfe4,#e8c37e)’</p>
<h1 id="slider的设置"><a href="#slider的设置" class="headerlink" title="slider的设置"></a>slider的设置</h1><p>slider:</p>
<h1 id="是否默认展开tags板块"><a href="#是否默认展开tags板块" class="headerlink" title="是否默认展开tags板块"></a>是否默认展开tags板块</h1><p>  showTags: false</p>
<h1 id="智能菜单"><a href="#智能菜单" class="headerlink" title="智能菜单"></a>智能菜单</h1><h1 id="如不需要，将该对应项置为false"><a href="#如不需要，将该对应项置为false" class="headerlink" title="如不需要，将该对应项置为false"></a>如不需要，将该对应项置为false</h1><h1 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h1><p>#smart_menu:</p>
<h1 id="friends-false"><a href="#friends-false" class="headerlink" title="friends: false"></a>friends: false</h1><p>smart_menu:<br>  innerArchive: ‘所有文章’<br>  friends: ‘友链’<br>  aboutme: ‘关于我’</p>
<p>friends:<br>  友情链接1: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>  友情链接2: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>  友情链接3: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>  友情链接4: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>  友情链接5: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>  友情链接6: <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<p>aboutme: 很惭愧<br><br>只做了一点微小的工作<br>谢谢大家</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主题配置文件在主目录下的_config.yml，请根据自己需要修改使用。 完整配置例子，可以参考我的博客备份&lt;/p&gt;
&lt;h1 id=&quot;Header&quot;&gt;&lt;a href=&quot;#Header&quot; class=&quot;headerlink&quot; title=&quot;Header&quot;&gt;&lt;/a&gt;Header&lt;/h1&gt;&lt;p&gt;menu:&lt;br&gt;  主页: /&lt;br&gt;  随笔: /tags/随笔/&lt;/p&gt;
&lt;h1 id=&quot;SubNav&quot;&gt;&lt;a href=&quot;#SubNav&quot; class=&quot;headerlink&quot; title=&quot;SubNav&quot;&gt;&lt;/a&gt;SubNav&lt;/h1&gt;&lt;p&gt;subnav:&lt;br&gt;  github: “#”&lt;br&gt;  weibo: “#”&lt;br&gt;  rss: “#”
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一个博客</title>
    <link href="http://yoursite.com/2017/04/08/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/04/08/我的第一个博客/</id>
    <published>2017-04-08T03:11:41.000Z</published>
    <updated>2017-05-16T03:23:59.532Z</updated>
    
    <content type="html"><![CDATA[<p>您好！欢迎来到我的第一个博客！在这里我会展示我的学术论文以及的我的小demo，欢迎您提出宝贵的意见！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您好！欢迎来到我的第一个博客！在这里我会展示我的学术论文以及的我的小demo，欢迎您提出宝贵的意见！&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
